---
// SearchBar.astro - A search component for the blog
---

<div class="search-container">
  <form id="search-form" action="/search" method="get" class="search-form">
    <div class="search-input-wrapper">
      <input 
        type="text" 
        id="search-input" 
        name="q"
        placeholder="搜尋文章..." 
        class="search-input"
        aria-label="搜尋文章"
      />
      <button id="search-button" type="submit" class="search-button" aria-label="搜尋">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
    </div>
  </form>
</div>

<style>
  .search-container {
    position: relative;
    width: 100%;
    max-width: 300px;
    margin: 0 auto;
  }

  .search-form {
    width: 100%;
  }

  .search-input-wrapper {
    display: flex;
    align-items: center;
    border: 1px solid var(--color-border-light);
    border-radius: var(--radius-sm);
    overflow: hidden;
    transition: all var(--transition-normal);
  }

  .search-input-wrapper:focus-within {
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(var(--color-primary), 0.3);
  }

  .search-input {
    flex: 1;
    padding: var(--spacing-sm) 0.75rem;
    border: none;
    outline: none;
    font-size: var(--font-size-sm);
    background: transparent;
  }

  .search-button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-sm);
    background-color: var(--color-bg-muted);
    border: none;
    cursor: pointer;
    transition: background-color var(--transition-normal);
  }

  .search-button:hover {
    background-color: var(--color-border-light);
  }

  @media (max-width: 768px) {
    .search-container {
      max-width: 100%;
    }
  }
</style>

<script>
  // Client-side search functionality
  let searchIndex = null;
  let allPosts = [];

  // Function to initialize the search index
  async function initSearchIndex() {
    try {
      // Fetch the search index from our endpoint
      const response = await fetch('/search-index.json');
      
      if (!response.ok) {
        throw new Error(`Failed to load search index: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (!Array.isArray(data)) {
        console.error('Search index is not an array:', data);
        return;
      }
      
      allPosts = data;
      searchIndex = data;
      
      console.log('Search index initialized with', allPosts.length, 'posts');
    } catch (error) {
      console.error('Error initializing search index:', error);
    }
  }

  // Function to perform search
  function performSearch(query) {
    if (!searchIndex || !query.trim()) {
      return [];
    }

    const searchTerms = query.toLowerCase().trim().split(/\s+/);
    
    return searchIndex.filter(post => {
      const titleMatch = post.title && searchTerms.some(term => 
        post.title.toLowerCase().includes(term)
      );
      
      const descriptionMatch = post.description && searchTerms.some(term => 
        post.description.toLowerCase().includes(term)
      );
      
      const tagsMatch = post.tags && Array.isArray(post.tags) && searchTerms.some(term => 
        post.tags.some(tag => tag.toLowerCase().includes(term))
      );
      
      return titleMatch || descriptionMatch || tagsMatch;
    });
  }

  // Function to highlight search terms in text
  function highlightText(text, query) {
    if (!text) return '';
    
    const searchTerms = query.toLowerCase().trim().split(/\s+/);
    let highlightedText = text;
    
    searchTerms.forEach(term => {
      if (term.length < 2) return; // Skip very short terms
      
      const regex = new RegExp(`(${term})`, 'gi');
      highlightedText = highlightedText.replace(regex, '<span class="search-result-highlight">$1</span>');
    });
    
    return highlightedText;
  }

  // Initialize search when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchForm = document.getElementById('search-form');
    
    if (!searchInput || !searchButton || !searchForm) {
      console.error('Search elements not found');
      return;
    }
    
    // Initialize search index
    initSearchIndex();
    
    // Handle search form submission
    searchForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const query = (searchInput as HTMLInputElement).value;
      
      if (query.trim().length === 0) {
        return;
      }
      
      (searchForm as HTMLFormElement).submit();
    });
  });
</script>

--- 
// src/components/TableOfContents.astro
// A sticky sidebar table of contents that appears when the main title is scrolled past.
---

<div class="toc-wrapper">
  <h3 class="toc-header">目錄</h3>
  <nav id="toc-nav" class="toc-nav"></nav>
</div>

<script>
  function initTOC() {
    const tocNav = document.getElementById('toc-nav');
    const articleContent = document.querySelector('.article-content');

    if (!tocNav || !articleContent) return;

    const headings = Array.from(
      articleContent.querySelectorAll<HTMLHeadingElement>('h2, h3, h4')
    );
    const tocWrapper = document.querySelector<HTMLElement>('.toc-wrapper');

    if (headings.length === 0 && tocWrapper) {
      tocWrapper.style.display = 'none';
      return;
    }

    tocNav.innerHTML = '';
    const tocList = document.createElement('ul');
    tocList.className = 'toc-list';

    const tocLinks: HTMLAnchorElement[] = [];

    headings.forEach((heading, index) => {
      if (!heading.id) heading.id = `toc-heading-${index}`;

      const listItem = document.createElement('li');
      listItem.className = `toc-item toc-${heading.tagName.toLowerCase()}`;

      const link = document.createElement('a');
      link.href = `#${heading.id}`;
      link.textContent = heading.textContent || '';
      link.dataset.targetId = heading.id;

      listItem.appendChild(link);
      tocList.appendChild(listItem);
      tocLinks.push(link);
    });

    tocNav.appendChild(tocList);

    let activeHeadingId: string | null = null;

    const scrollSpyObserver = new IntersectionObserver(
      (entries) => {
        let topmostIntersectingEntry: IntersectionObserverEntry | null = null;
        for (const entry of entries) {
          if (entry.isIntersecting) {
            if (!topmostIntersectingEntry || entry.boundingClientRect.top < topmostIntersectingEntry.boundingClientRect.top) {
              topmostIntersectingEntry = entry;
            }
          }
        }

        const newActiveId = topmostIntersectingEntry ? topmostIntersectingEntry.target.id : null;

        if (newActiveId !== activeHeadingId) {
          activeHeadingId = newActiveId;
          tocLinks.forEach((link) => {
            link.classList.remove('active');
            if (link.dataset.targetId === activeHeadingId) {
              link.classList.add('active');
            }
          });
        }
      },
      { rootMargin: '0px 0px -80% 0px', threshold: 0 }
    );

    headings.forEach((heading) => scrollSpyObserver.observe(heading));

    document.addEventListener('astro:before-swap', () => scrollSpyObserver.disconnect(), { once: true });
  }

  document.addEventListener('astro:page-load', initTOC);
</script>

<style>
  .toc-wrapper {
    position: sticky;
    top: 80px;
    max-height: calc(100vh - 100px);
    overflow-y: auto;
    padding-left: 1.5rem;
  }

  .toc-header {
    font-size: 0.9rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: rgb(var(--gray-dark));
    margin-bottom: 1rem;
  }

  :global(.toc-list) {
    list-style: none;
    padding: 0;
    margin: 0;
    border-left: 1px solid rgba(var(--gray-light), 0.8);
  }

  :global(.toc-item a) {
    display: block;
    color: rgb(var(--gray));
    text-decoration: none;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    line-height: 1.5;
    padding: 0.25rem 0 0.25rem 1rem;
    border-left: 2px solid transparent;
  }

  :global(.toc-item.toc-h2 a) {
    padding-left: 1rem;
  }

  :global(.toc-item.toc-h3 a) {
    padding-left: 2rem;
  }

  :global(.toc-item.toc-h4 a) {
    padding-left: 3rem;
    font-size: 0.85rem;
  }

  :global(.toc-item a:hover) {
    color: rgb(var(--gray-dark));
    background-color: rgba(var(--gray-light), 0.5);
  }

  :global(.toc-item a.active) {
    color: var(--accent);
    border-left-color: var(--accent);
  }

  @media (max-width: 1024px) {
    .toc-wrapper {
      display: none;
    }
  }
</style>
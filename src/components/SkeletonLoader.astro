---
interface Props {
  type?: 'text' | 'title' | 'paragraph' | 'image' | 'card' | 'custom';
  lines?: number;
  width?: string;
  height?: string;
  class?: string;
  rounded?: boolean;
}

const { 
  type = 'text',
  lines = 3,
  width = '100%',
  height = '1rem',
  class: className = '',
  rounded = false
} = Astro.props;
---

<div class={`skeleton-container ${className}`}>
  {type === 'text' && (
    <div class="skeleton-line" style={`width: ${width}; height: ${height};`}></div>
  )}
  
  {type === 'title' && (
    <div class="skeleton-line skeleton-title" style={`width: ${width}; height: 2rem;`}></div>
  )}
  
  {type === 'paragraph' && (
    <div class="skeleton-paragraph">
      {Array.from({ length: lines }, (_, i) => (
        <div 
          class="skeleton-line" 
          style={`width: ${i === lines - 1 ? '70%' : '100%'}; height: ${height};`}
        ></div>
      ))}
    </div>
  )}
  
  {type === 'image' && (
    <div 
      class={`skeleton-image ${rounded ? 'rounded' : ''}`}
      style={`width: ${width}; height: ${height};`}
    ></div>
  )}
  
  {type === 'card' && (
    <div class="skeleton-card">
      <div class="skeleton-image" style="width: 100%; height: 200px;"></div>
      <div class="skeleton-card-content">
        <div class="skeleton-line skeleton-title" style="width: 80%; height: 1.5rem;"></div>
        <div class="skeleton-paragraph">
          <div class="skeleton-line" style="width: 100%; height: 1rem;"></div>
          <div class="skeleton-line" style="width: 85%; height: 1rem;"></div>
          <div class="skeleton-line" style="width: 60%; height: 1rem;"></div>
        </div>
      </div>
    </div>
  )}
  
  {type === 'custom' && (
    <div 
      class="skeleton-custom"
      style={`width: ${width}; height: ${height};`}
    ></div>
  )}
</div>

<style>
  .skeleton-container {
    display: block;
    width: 100%;
  }

  .skeleton-line,
  .skeleton-image,
  .skeleton-custom {
    background: linear-gradient(
      90deg,
      var(--color-bg-muted) 25%,
      var(--color-bg-secondary) 50%,
      var(--color-bg-muted) 75%
    );
    background-size: 200% 100%;
    animation: skeleton-shimmer 1.5s infinite ease-in-out;
    border-radius: var(--radius-sm);
    display: block;
  }

  .skeleton-line {
    height: 1rem;
    margin-bottom: var(--spacing-sm);
  }

  .skeleton-title {
    height: 2rem;
    margin-bottom: var(--spacing-md);
  }

  .skeleton-paragraph {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .skeleton-image {
    border-radius: var(--radius-md);
    margin-bottom: var(--spacing-md);
  }

  .skeleton-image.rounded {
    border-radius: var(--radius-full);
  }

  .skeleton-card {
    border: 1px solid var(--color-border-light);
    border-radius: var(--radius-lg);
    overflow: hidden;
    background: var(--color-bg-primary);
    box-shadow: var(--shadow-sm);
  }

  .skeleton-card-content {
    padding: var(--spacing-lg);
  }

  @keyframes skeleton-shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  /* 淡入動畫，當內容載入完成時使用 */
  .skeleton-fade-out {
    animation: skeleton-fade-out var(--transition-normal) ease-out forwards;
  }

  @keyframes skeleton-fade-out {
    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }

  /* 響應式調整 */
  @media (max-width: 768px) {
    .skeleton-line {
      height: 0.875rem;
    }
    
    .skeleton-title {
      height: 1.75rem;
    }
  }

  /* 預設顏色主題變數覆蓋 */
  @media (prefers-color-scheme: dark) {
    .skeleton-line,
    .skeleton-image,
    .skeleton-custom {
      background: linear-gradient(
        90deg,
        #374151 25%,
        #4b5563 50%,
        #374151 75%
      );
    }
  }

  /* 減少動畫偏好的使用者 */
  @media (prefers-reduced-motion: reduce) {
    .skeleton-line,
    .skeleton-image,
    .skeleton-custom {
      animation: none;
      background: var(--color-bg-muted);
    }
  }
</style>

<script>
  // Skeleton Loader 工具類
  class SkeletonManager {
    static show(element: Element) {
      element.classList.remove('skeleton-fade-out');
      (element as HTMLElement).style.display = 'block';
    }

    static hide(element: Element, callback?: () => void) {
      element.classList.add('skeleton-fade-out');
      
      setTimeout(() => {
        (element as HTMLElement).style.display = 'none';
        element.classList.remove('skeleton-fade-out');
        callback?.();
      }, 200); // 對應 CSS transition 時間
    }

    static replace(skeletonElement: Element, contentElement: Element) {
      this.hide(skeletonElement, () => {
        contentElement.classList.add('fade-in');
      });
    }
  }

  // 全域註冊，讓其他組件可以使用
  (window as any).SkeletonManager = SkeletonManager;
</script>
---
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  quality?: number;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className = '', 
  loading = 'lazy',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  quality = 80
} = Astro.props;

// WebP 版本的圖片路徑
const webpSrc = src.replace(/\.(jpg|jpeg|png)$/i, '.webp');
const avifSrc = src.replace(/\.(jpg|jpeg|png)$/i, '.avif');

// 生成響應式圖片大小
const srcSet = width ? [
  `${src.replace(/\.(jpg|jpeg|png)$/i, `-400w.$1`)} 400w`,
  `${src.replace(/\.(jpg|jpeg|png)$/i, `-800w.$1`)} 800w`,
  `${src.replace(/\.(jpg|jpeg|png)$/i, `-1200w.$1`)} 1200w`
].join(', ') : undefined;

const webpSrcSet = width ? [
  `${webpSrc.replace(/\.webp$/i, '-400w.webp')} 400w`,
  `${webpSrc.replace(/\.webp$/i, '-800w.webp')} 800w`, 
  `${webpSrc.replace(/\.webp$/i, '-1200w.webp')} 1200w`
].join(', ') : undefined;
---

<picture class={`lazy-image ${className}`}>
  <!-- AVIF format for best compression -->
  {avifSrc && (
    <source 
      srcset={webpSrcSet || avifSrc}
      sizes={sizes}
      type="image/avif"
    />
  )}
  
  <!-- WebP format for better compression -->
  <source 
    srcset={webpSrcSet || webpSrc}
    sizes={sizes}
    type="image/webp"
  />
  
  <!-- Fallback to original format -->
  <img
    src={src}
    srcset={srcSet}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding="async"
    sizes={sizes}
    class="lazy-img"
    data-src={src}
  />
</picture>

<style>
  .lazy-image {
    display: block;
    position: relative;
    overflow: hidden;
    background-color: var(--color-bg-muted);
    border-radius: var(--radius-md);
  }

  .lazy-img {
    width: 100%;
    height: auto;
    border-radius: var(--radius-md);
    transition: opacity var(--transition-normal), transform var(--transition-normal);
    opacity: 0;
  }

  .lazy-img.loaded {
    opacity: 1;
  }

  .lazy-img.loading {
    opacity: 0.5;
    filter: blur(5px);
  }

  /* 骨架屏效果 */
  .lazy-image::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      var(--color-bg-muted) 25%,
      var(--color-bg-secondary) 50%,
      var(--color-bg-muted) 75%
    );
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
    border-radius: var(--radius-md);
    z-index: 1;
  }

  .lazy-image.loaded::before {
    display: none;
  }

  @keyframes skeleton-loading {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  /* 錯誤狀態 */
  .lazy-img.error {
    opacity: 1;
    filter: none;
    background-color: var(--color-bg-muted);
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 200px;
    color: var(--text-muted);
  }

  .lazy-img.error::after {
    content: '圖片載入失敗';
    font-size: var(--font-size-sm);
  }
</style>

<script>
  // 圖片懶加載觀察器
  class LazyImageObserver {
    constructor() {
      this.imageObserver = new IntersectionObserver(
        this.handleIntersection.bind(this),
        {
          root: null,
          rootMargin: '50px',
          threshold: 0.1
        }
      );
      
      this.init();
    }

    init() {
      // 觀察所有懶加載圖片
      const lazyImages = document.querySelectorAll('.lazy-img');
      lazyImages.forEach(img => this.imageObserver.observe(img));
    }

    handleIntersection(entries) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          this.loadImage(entry.target);
          this.imageObserver.unobserve(entry.target);
        }
      });
    }

    loadImage(img) {
      const picture = img.closest('.lazy-image');
      
      // 添加載入中狀態
      img.classList.add('loading');
      
      const handleLoad = () => {
        img.classList.remove('loading');
        img.classList.add('loaded');
        picture?.classList.add('loaded');
        img.removeEventListener('load', handleLoad);
        img.removeEventListener('error', handleError);
      };

      const handleError = () => {
        img.classList.remove('loading');
        img.classList.add('error');
        picture?.classList.add('loaded'); // 移除骨架屏
        img.removeEventListener('load', handleLoad);
        img.removeEventListener('error', handleError);
      };

      img.addEventListener('load', handleLoad);
      img.addEventListener('error', handleError);

      // 如果圖片已經載入完成（來自快取）
      if (img.complete && img.naturalHeight !== 0) {
        handleLoad();
      }
    }
  }

  // 確保 DOM 載入完成後初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new LazyImageObserver();
    });
  } else {
    new LazyImageObserver();
  }

  // 處理 Astro View Transitions
  document.addEventListener('astro:page-load', () => {
    new LazyImageObserver();
  });
</script>
---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';

// Get all blog posts for client-side search
const posts = await getCollection('blog');
const allPosts = posts.map(post => {
  const path = post.id.slice(0, post.id.lastIndexOf("/")).toLowerCase();
  return {
    title: post.data.title,
    description: post.data.description || '',
    date: post.data.date.toISOString(),
    tags: post.data.tags || [],
    categories: post.data.categories || [],
    url: `/post/${path}/`,
    slug: post.slug,
    id: post.id
  };
});

// Sort by date (newest first)
allPosts.sort((a, b) => new Date(b.date) - new Date(a.date));

// Get query parameter from URL
const url = new URL(Astro.request.url);
const query = url.searchParams.get('q') || '';

// Filter posts based on query
let searchResults = [];
if (query) {
  const searchTerms = query.toLowerCase().trim().split(/\s+/);
  searchResults = allPosts.filter(post => {
    const titleMatch = post.title && searchTerms.some(term => 
      post.title.toLowerCase().includes(term)
    );
    
    const descriptionMatch = post.description && searchTerms.some(term => 
      post.description.toLowerCase().includes(term)
    );
    
    const tagsMatch = post.tags && Array.isArray(post.tags) && searchTerms.some(term => 
      post.tags.some(tag => tag.toLowerCase().includes(term))
    );
    
    return titleMatch || descriptionMatch || tagsMatch;
  });
}

// Function to highlight search terms in text
function highlightText(text, query) {
  if (!text || !query) return text;
  
  const searchTerms = query.toLowerCase().trim().split(/\s+/);
  let highlightedText = text;
  
  searchTerms.forEach(term => {
    if (term.length < 2) return; // Skip very short terms
    
    const regex = new RegExp(`(${term})`, 'gi');
    highlightedText = highlightedText.replace(regex, '<span class="search-result-highlight">$1</span>');
  });
  
  return highlightedText;
}
---

<!DOCTYPE html>
<html lang="zh-TW">
  <head>
    <BaseHead title={`搜尋 | ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
    <style>
      .search-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        min-height: 70vh;
      }
      
      .search-header {
        margin-bottom: var(--spacing-lg);
        text-align: center;
      }
      
      .search-header h1 {
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        margin-bottom: var(--spacing-md);
        color: var(--text-primary);
      }

      .search-input-container {
        max-width: 600px;
        margin: 0 auto var(--spacing-lg);
        position: relative;
      }

      .search-form {
        position: relative;
        display: flex;
        align-items: center;
      }

      .search-input {
        width: 100%;
        padding: var(--spacing-md) 3.5rem var(--spacing-md) var(--spacing-lg);
        border: 2px solid var(--color-border-light);
        border-radius: var(--radius-full);
        font-size: var(--font-size-base);
        background: var(--color-bg-primary);
        color: var(--text-primary);
        transition: all var(--transition-normal);
        box-shadow: var(--shadow-sm);
      }

      .search-input:focus {
        outline: none;
        border-color: var(--color-primary);
        box-shadow: 0 0 0 4px rgba(35, 55, 255, 0.1);
        transform: scale(1.02);
      }

      .search-input::placeholder {
        color: var(--text-muted);
      }

      .search-submit {
        position: absolute;
        right: 4px;
        top: 50%;
        transform: translateY(-50%);
        width: 40px;
        height: 40px;
        background: var(--color-primary);
        color: white;
        border: none;
        border-radius: var(--radius-full);
        cursor: pointer;
        transition: all var(--transition-normal);
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: var(--shadow-sm);
      }

      .search-submit:hover {
        background: var(--color-primary-dark);
        transform: translateY(-50%) scale(1.05);
        box-shadow: var(--shadow-md);
      }

      .search-submit svg {
        width: 18px;
        height: 18px;
      }

      .search-stats {
        text-align: center;
        margin-bottom: var(--spacing-2xl);
        padding: var(--spacing-lg);
        background: var(--color-bg-secondary);
        border-radius: var(--radius-lg);
        border: 1px solid var(--color-border-light);
      }
      
      .search-stats-text {
        font-size: var(--font-size-base);
        color: var(--text-secondary);
        margin: 0;
        font-weight: var(--font-weight-medium);
      }
      
      .search-results-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: var(--spacing-xl);
        margin-bottom: var(--spacing-3xl);
      }
      
      .search-result-item {
        padding: var(--spacing-lg);
        border-radius: var(--radius-lg);
        border: 1px solid var(--color-border-light);
        transition: all var(--transition-normal);
        background: var(--color-bg-primary);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        display: flex;
        flex-direction: column;
        height: fit-content;
        position: relative;
        overflow: hidden;
        cursor: pointer;
      }

      .search-result-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: var(--color-primary);
        opacity: 0;
        transition: all var(--transition-normal);
      }

      .search-result-item::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, rgba(35, 55, 255, 0.02) 0%, rgba(35, 55, 255, 0.01) 100%);
        opacity: 0;
        transition: opacity var(--transition-normal);
        pointer-events: none;
      }
      
      .search-result-item:hover {
        border-color: rgba(35, 55, 255, 0.3);
        box-shadow: 0 8px 25px rgba(35, 55, 255, 0.15);
        transform: translateY(-2px);
      }

      .search-result-item:hover::before {
        opacity: 1;
      }

      .search-result-item:hover::after {
        opacity: 1;
      }
      
      .search-result-title {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        color: var(--text-primary);
        margin-bottom: var(--spacing-sm);
        line-height: var(--line-height-tight);
        position: relative;
        z-index: 2;
      }
      
      .search-result-title a {
        text-decoration: none;
        color: inherit;
        transition: color var(--transition-fast);
      }
      
      .search-result-title a:hover {
        color: var(--color-primary);
      }
      
      .search-result-date {
        font-size: var(--font-size-xs);
        color: var(--text-muted);
        margin-bottom: var(--spacing-sm);
        font-weight: var(--font-weight-medium);
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
        position: relative;
        z-index: 2;
      }

      .search-result-date::before {
        content: '📅';
        font-size: 0.8em;
      }
      
      .search-result-description {
        font-size: var(--font-size-sm);
        color: var(--text-secondary);
        line-height: var(--line-height-relaxed);
        flex-grow: 1;
        position: relative;
        z-index: 2;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
      
      .search-result-highlight {
        background-color: rgba(35, 55, 255, 0.15);
        color: var(--color-primary);
        padding: 0.125rem 0.25rem;
        border-radius: var(--radius-sm);
        font-weight: var(--font-weight-medium);
      }
      
      .no-results {
        grid-column: 1 / -1;
        padding: var(--spacing-3xl);
        text-align: center;
        background: linear-gradient(135deg, var(--color-bg-secondary) 0%, var(--color-bg-primary) 100%);
        border-radius: var(--radius-xl);
        border: 1px solid var(--color-border-light);
        max-width: 700px;
        margin: 0 auto;
        box-shadow: var(--shadow-sm);
      }

      .welcome-search {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--spacing-lg);
      }

      .search-icon-large {
        font-size: 4rem;
        margin-bottom: var(--spacing-md);
      }

      .welcome-search h2 {
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        color: var(--text-primary);
        margin: 0;
      }

      .welcome-search p {
        font-size: var(--font-size-lg);
        color: var(--text-secondary);
        margin: 0;
        max-width: 400px;
      }

      .search-suggestions {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--spacing-md);
        margin-top: var(--spacing-lg);
      }

      .suggestion-label {
        font-size: var(--font-size-sm);
        color: var(--text-muted);
        font-weight: var(--font-weight-medium);
      }

      .suggestion-tags {
        display: flex;
        flex-wrap: wrap;
        gap: var(--spacing-sm);
        justify-content: center;
      }

      .suggestion-tag {
        padding: var(--spacing-sm) var(--spacing-md);
        background: var(--color-bg-primary);
        border: 1px solid var(--color-border-light);
        border-radius: var(--radius-full);
        font-size: var(--font-size-sm);
        color: var(--text-secondary);
        cursor: pointer;
        transition: all var(--transition-normal);
        user-select: none;
      }

      .suggestion-tag:hover {
        background: var(--color-primary);
        color: white;
        border-color: var(--color-primary);
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
      }
      
      .loading-container {
        display: none;
        justify-content: center;
        align-items: center;
        padding: 3rem;
        grid-column: 1 / -1;
      }
      
      .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #e2e8f0;
        border-radius: 50%;
        border-top-color: #3b82f6;
        animation: spinner 1s linear infinite;
      }
      
      @keyframes spinner {
        to {
          transform: rotate(360deg);
        }
      }
      
      .search-query-display {
        font-weight: var(--font-weight-semibold);
        color: var(--color-primary);
      }
      
      @media (max-width: 768px) {
        .search-page {
          padding: 1rem;
        }

        .search-header h1 {
          font-size: var(--font-size-3xl);
        }

        .search-input-container {
          margin-bottom: var(--spacing-lg);
          max-width: 90%;
        }

        .search-input {
          padding: var(--spacing-sm) 3rem var(--spacing-sm) var(--spacing-md);
          font-size: var(--font-size-sm);
        }

        .search-submit {
          width: 35px;
          height: 35px;
          right: 3px;
        }

        .search-submit svg {
          width: 16px;
          height: 16px;
        }
        
        .search-results-list {
          grid-template-columns: 1fr;
        }
        
        .search-result-item {
          padding: var(--spacing-md);
        }

        .search-result-title {
          font-size: var(--font-size-base);
        }

        .search-result-description {
          font-size: var(--font-size-xs);
          -webkit-line-clamp: 2;
        }

        .suggestion-tags {
          flex-direction: column;
          align-items: center;
        }

        .suggestion-tag {
          min-width: 120px;
          text-align: center;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main class="search-page">
      <div class="search-header">
        <h1>🔍 搜尋文章</h1>
      </div>
      
      <div class="search-input-container">
        <form id="search-form" class="search-form" action="/search" method="get">
          <input 
            type="text" 
            id="search-input" 
            name="q"
            value={query || ''}
            placeholder="輸入關鍵字搜尋文章..." 
            class="search-input"
            autocomplete="off"
            autofocus={!query}
          />
          <button type="submit" class="search-submit" title="搜尋">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
          </button>
        </form>
      </div>

      <div id="search-results">
        {query && (
          <div class="search-stats">
            <p class="search-stats-text">
              {searchResults.length === 0 
                ? `沒有找到符合 "${query}" 的結果` 
                : `找到 ${searchResults.length} 個符合 "${query}" 的結果`}
            </p>
          </div>
        )}
        
        <div class="loading-container" id="loading-container">
          <div class="loading-spinner"></div>
        </div>
        
        <div class="search-results-list" id="search-results-list">
          {searchResults.length === 0 && query ? (
            <div class="no-results">
              <p>沒有找到符合 "<span class="search-query-display">${query}</span>" 的結果</p>
              <p>請嘗試使用不同的關鍵字或更廣泛的搜尋詞</p>
            </div>
          ) : (
            searchResults.map(post => (
              <div class="search-result-item" onclick={`window.location.href='${post.url}'`} role="link" tabindex="0">
                <div class="search-result-title">
                  <a href={post.url} set:html={highlightText(post.title, query)} />
                </div>
                <div class="search-result-date">
                  {new Date(post.date).toLocaleDateString('zh-TW')}
                </div>
                {post.description && (
                  <div class="search-result-description" set:html={highlightText(post.description, query)} />
                )}
              </div>
            ))
          )}
          
          {!query && (
            <div class="no-results">
              <div class="welcome-search">
                <div class="search-icon-large">🔍</div>
                <h2>開始搜尋文章</h2>
                <p>在上方搜尋框中輸入關鍵字，探索豐富的技術內容</p>
                <div class="search-suggestions">
                  <span class="suggestion-label">熱門搜尋:</span>
                  <div class="suggestion-tags">
                    <span class="suggestion-tag" data-query="Docker">Docker</span>
                    <span class="suggestion-tag" data-query="架構">架構</span>
                    <span class="suggestion-tag" data-query="DevOps">DevOps</span>
                    <span class="suggestion-tag" data-query=".NET">.NET</span>
                    <span class="suggestion-tag" data-query="管理">管理</span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </main>
    <Footer />
    
    <script>
      // Client-side search functionality for the search results page
      let searchIndex = null;
      let allPosts = [];
      let isSearching = false;

      // Function to initialize the search index
      async function initSearchIndex() {
        try {
          // Fetch the search index from our endpoint
          const response = await fetch('/search-index.json');
          
          if (!response.ok) {
            throw new Error(`Failed to load search index: ${response.status} ${response.statusText}`);
          }
          
          const data = await response.json();
          
          if (!Array.isArray(data)) {
            console.error('Search index is not an array:', data);
            return;
          }
          
          allPosts = data;
          searchIndex = data;
          
          console.log('Search index initialized with', allPosts.length, 'posts');
        } catch (error) {
          console.error('Error initializing search index:', error);
        }
      }

      // Function to perform search
      function performSearch(query) {
        if (!searchIndex || !query.trim()) {
          return [];
        }

        const searchTerms = query.toLowerCase().trim().split(/\s+/);
        
        return searchIndex.filter(post => {
          const titleMatch = post.title && searchTerms.some(term => 
            post.title.toLowerCase().includes(term)
          );
          
          const descriptionMatch = post.description && searchTerms.some(term => 
            post.description.toLowerCase().includes(term)
          );
          
          const tagsMatch = post.tags && Array.isArray(post.tags) && searchTerms.some(term => 
            post.tags.some(tag => tag.toLowerCase().includes(term))
          );
          
          return titleMatch || descriptionMatch || tagsMatch;
        });
      }

      // Function to highlight search terms in text
      function highlightText(text, query) {
        if (!text) return '';
        
        const searchTerms = query.toLowerCase().trim().split(/\s+/);
        let highlightedText = text;
        
        searchTerms.forEach(term => {
          if (term.length < 2) return; // Skip very short terms
          
          const regex = new RegExp(`(${term})`, 'gi');
          highlightedText = highlightedText.replace(regex, '<span class="search-result-highlight">$1</span>');
        });
        
        return highlightedText;
      }

      // Function to show loading indicator
      function showLoading() {
        const loadingContainer = document.getElementById('loading-container');
        const resultsContainer = document.getElementById('search-results-list');
        
        if (loadingContainer && resultsContainer) {
          loadingContainer.style.display = 'flex';
          resultsContainer.style.display = 'none';
        }
        
        isSearching = true;
      }

      // Function to hide loading indicator
      function hideLoading() {
        const loadingContainer = document.getElementById('loading-container');
        const resultsContainer = document.getElementById('search-results-list');
        
        if (loadingContainer && resultsContainer) {
          loadingContainer.style.display = 'none';
          resultsContainer.style.display = 'grid';
        }
        
        isSearching = false;
      }

      // Function to render search results
      function renderSearchResults(results, query) {
        const resultsContainer = document.getElementById('search-results');
        const resultsListContainer = document.getElementById('search-results-list');
        
        if (!resultsContainer || !resultsListContainer) return;
        
        // Update stats
        let statsHtml = '';
        if (query) {
          statsHtml = `<div class="search-stats">
            <p class="search-stats-text">
              ${results.length === 0 
                ? `沒有找到符合 "${query}" 的結果` 
                : `找到 ${results.length} 個符合 "${query}" 的結果`}
            </p>
          </div>`;
        }
        
        // Update results list
        let resultsHtml = '';
        
        if (results.length === 0 && query) {
          resultsHtml = `<div class="no-results">
            <div class="welcome-search">
              <div class="search-icon-large">😞</div>
              <h2>沒有找到結果</h2>
              <p>沒有找到符合 "${query}" 的文章</p>
              <div class="search-suggestions">
                <span class="suggestion-label">試試其他關鍵字:</span>
                <div class="suggestion-tags">
                  <span class="suggestion-tag" data-query="Docker">Docker</span>
                  <span class="suggestion-tag" data-query="架構">架構</span>
                  <span class="suggestion-tag" data-query="DevOps">DevOps</span>
                  <span class="suggestion-tag" data-query=".NET">.NET</span>
                  <span class="suggestion-tag" data-query="管理">管理</span>
                </div>
              </div>
            </div>
          </div>`;
        } else if (!query) {
          resultsHtml = `<div class="no-results">
            <div class="welcome-search">
              <div class="search-icon-large">🔍</div>
              <h2>開始搜尋文章</h2>
              <p>在上方搜尋框中輸入關鍵字，探索豐富的技術內容</p>
              <div class="search-suggestions">
                <span class="suggestion-label">熱門搜尋:</span>
                <div class="suggestion-tags">
                  <span class="suggestion-tag" data-query="Docker">Docker</span>
                  <span class="suggestion-tag" data-query="架構">架構</span>
                  <span class="suggestion-tag" data-query="DevOps">DevOps</span>
                  <span class="suggestion-tag" data-query=".NET">.NET</span>
                  <span class="suggestion-tag" data-query="管理">管理</span>
                </div>
              </div>
            </div>
          </div>`;
        } else {
          results.forEach(post => {
            resultsHtml += `
              <div class="search-result-item" onclick="window.location.href='${post.url}'" role="link" tabindex="0">
                <div class="search-result-title">
                  <a href="${post.url}">${highlightText(post.title, query)}</a>
                </div>
                <div class="search-result-date">
                  ${new Date(post.date).toLocaleDateString('zh-TW')}
                </div>
                ${post.description ? 
                  `<div class="search-result-description">${highlightText(post.description, query)}</div>` : 
                  ''}
              </div>
            `;
          });
        }
        
        // Update the DOM
        const existingStats = resultsContainer.querySelector('.search-stats');
        if (existingStats) {
          if (statsHtml) {
            existingStats.outerHTML = statsHtml;
          } else {
            existingStats.remove();
          }
        } else if (statsHtml) {
          resultsContainer.insertAdjacentHTML('afterbegin', statsHtml);
        }
        
        resultsListContainer.innerHTML = resultsHtml;
        
        // Re-attach suggestion tag event listeners
        const suggestionTags = document.querySelectorAll('.suggestion-tag');
        suggestionTags.forEach(tag => {
          tag.addEventListener('click', () => {
            const query = tag.dataset.query;
            if (query) {
              const searchInput = document.getElementById('search-input');
              searchInput.value = query;
              // Trigger search
              const searchForm = document.getElementById('search-form');
              searchForm.dispatchEvent(new Event('submit'));
            }
          });
        });
      }

      // Function to update URL without page reload
      function updateURL(query) {
        const url = new URL(window.location);
        url.searchParams.set('q', query);
        window.history.pushState({}, '', url);
      }

      // Initialize search when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        // Find the search form and input
        const searchForm = document.getElementById('search-form');
        const searchInput = document.getElementById('search-input');
        
        if (!searchForm || !searchInput) {
          console.error('Search elements not found');
          return;
        }
        
        // Initialize search index
        initSearchIndex().then(() => {
          // If there's a query in the URL, perform client-side search as well
          const urlParams = new URLSearchParams(window.location.search);
          const query = urlParams.get('q');
          
          if (query && searchIndex) {
            // Perform the search
            const results = performSearch(query);
            renderSearchResults(results, query);
          } else if (!query) {
            // Show welcome screen if no query
            renderSearchResults([], '');
          }
        });

        // Handle suggestion tag clicks
        const suggestionTags = document.querySelectorAll('.suggestion-tag');
        suggestionTags.forEach(tag => {
          tag.addEventListener('click', () => {
            const query = tag.dataset.query;
            if (query) {
              searchInput.value = query;
              searchForm.submit();
            }
          });
        });
        
        // Debounced search function
        let searchTimeout;
        function debouncedSearch(query) {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(async () => {
            if (!searchIndex) {
              await initSearchIndex();
            }
            
            const results = performSearch(query);
            updateURL(query);
            renderSearchResults(results, query);
          }, 300);
        }

        // Handle search input changes (real-time search)
        searchInput.addEventListener('input', (e) => {
          const query = e.target.value.trim();
          if (query.length > 0) {
            debouncedSearch(query);
          } else {
            // Clear results if input is empty
            updateURL('');
            renderSearchResults([], '');
          }
        });

        // Handle search form submission
        searchForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const query = searchInput.value.trim();
          
          if (query.length === 0) {
            renderSearchResults([], '');
            return;
          }
          
          // Immediate search on submit
          if (!searchIndex) {
            await initSearchIndex();
          }
          
          const results = performSearch(query);
          updateURL(query);
          renderSearchResults(results, query);
        });
      });
    </script>
  </body>
</html>

---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import { getCollection } from "astro:content";
import Summary from "../components/summary.astro";
import Sidebar from "../components/sidebar.astro";

import type { GetStaticPathsOptions } from 'astro';

export async function getStaticPaths(options: GetStaticPathsOptions) {
    const { paginate } = options;
    const posts = await getCollection("blog");
    const sortPosts = posts.sort((a, b) =>
        b.data.date.valueOf() - a.data.date.valueOf()
    );

    return paginate(sortPosts, {
        pageSize: 10,
    })
}

const { page } = Astro.props;
const paginationList: number[] = Array.from({ length: page.lastPage }, (_, i) => i + 1);
---

<!doctype html>
<html lang="en" itemscope itemtype="https://schema.org/Blog">
<head>
    <BaseHead title={ SITE_TITLE } description={ SITE_DESCRIPTION } />
    <style>
        main {
            display: flex;
            width: 960px;
        }

        section {
            flex: 1;
            margin-right: 1rem;
        }

        @media (max-width: 768px) {
            main {
                flex-direction: column;
                width: 100%;
            }

            section {
                margin-right: 0;
            }
        }

        .common-page-item {
            @apply flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-200 hover:text-gray-700
        }

        .common-page-item-start {
            @apply common-page-item ms-0 border-e-0 rounded-s-lg
        }

        .common-page-item-end {
            @apply common-page-item  rounded-e-lg
        }
    </style>

    <!-- microdata -->
    <meta itemprop="headline" content={ SITE_TITLE }>
    <meta itemprop="description" content={ SITE_DESCRIPTION }>
</head>
<body>
<Header />
<main>
    <section>
        { page.data.map((post) =>
                <Summary post={ post } />) }
        { page.total > page.size ? (
            <!--<div class="mt-4">-->
                <nav aria-label="Blog pages" class="page flex justify-center">
                    <!-- 頁數 -->
                    <!--                <div class="flex justify-center">-->

                    <ul class="inline-flex -space-x-px text-sm m-auto">
                        {
                            paginationList.map((num) => {
                                const path = `${ num == 1 ? "/" : num }`;

                                switch (num) {
                                    case 1:
                                        return (
                                                <li>
                                                    <a href={ path }
                                                       class:list={ ["common-page-item-start", (page.currentPage === num) && 'font-black text-red-500'] }>{ num }</a>
                                                </li>
                                        );
                                    case page.lastPage:
                                        return (
                                                <li>
                                                    <a href={ path }
                                                       class:list={["common-page-item-end", (page.currentPage === num) && 'font-black text-red-500']}>{ num }</a>
                                                </li>
                                        );
                                    default:

                                        return (
                                                <li>
                                                    <a href={ path } class:list={ ["common-page-item",
                                                        num === page.currentPage && 'font-black text-red-500'] }>{ num }</a>
                                                </li>
                                        );

                                }
                            })
                        }
                    </ul>
                </nav>
        ) : null }
    </section>
    <Sidebar />
</main>
<Footer />
</body>
</html>

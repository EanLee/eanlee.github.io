---
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Categories from '../components/widget/categories.astro';
import Series from '../components/widget/series.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import SeriesBlock from '../components/SeriesBlock.astro';

export interface Props {
  seriesName: string;
  seriesTitle: string;
  epicFilter: string;
  accentColor: string;
  source?: any[];
}

const { seriesName, seriesTitle, epicFilter, accentColor, source } = Astro.props;

// Get all posts for this series
const seriesPosts = source?.sort((a, b) => new Date(a.data.date).valueOf() - new Date(b.data.date).valueOf()) || [];

// Get all series from the same epic for the SeriesBlock navigation
const allPosts = await getCollection('blog');
const epicSeries = [...new Set(
  allPosts
    .filter(post => {
      if ('epic' in post.data) {
        return post.data.epic === epicFilter && post.data.series;
      }
      return false;
    })
    .map(post => post.data.series)
)]
.filter(series => series && series !== seriesName);

// Group posts by series for the SeriesBlock components
const seriesGroups = epicSeries.map(series => {
  const posts = allPosts
    .filter(post => post.data.series === series && post.data.epic === epicFilter)
    .sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());
  
  if (posts.length > 0) {
    const firstPost = posts[0];
    const path = firstPost.id.slice(0, firstPost.id.lastIndexOf(firstPost.slug) - 1).toLowerCase();
    return {
      series,
      posts,
      path
    };
  }
  return null;
}).filter(Boolean);
---

<html lang="zh-TW">
  <head>
    <BaseHead title={`${seriesTitle} | ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    
    <div class="series-container">
      <div class="main-content">
        <div class="sidebar-area">
          <div class="widget-container">
            <Series />
            <Categories posts={seriesPosts} />
          </div>
        </div>
        
        <div class="content-area">
          <div class="page-header">
            <h1>{seriesTitle}</h1>
            <p>系列文章：共 {seriesPosts.length} 篇</p>
          </div>
          
          <div class="posts-list">
            {seriesPosts.length > 0 ? (
              seriesPosts.map(post => (
                <article class="post-card">
                  <div class="post-content">
                    <div class="post-meta-row">
                      <time class="post-date" datetime={post.data.date.toISOString()}>
                        {new Date(post.data.date).toLocaleDateString('zh-TW', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                        })}
                      </time>
                      
                      {post.data.tags && post.data.tags.length > 0 && (
                        <div class="post-tags">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"/><path d="M7 7h.01"/></svg>
                          <span class="tag-list">
                            {post.data.tags?.map((tag, index) => (
                              <>
                                <a href={`/tags/${tag}`} class="tag-link">{tag}</a>
                                {index < post.data.tags.length - 1 && ", "}
                              </>
                            ))}
                          </span>
                        </div>
                      )}
                    </div>
                    
                    <h3 class="post-title">
                      <a href={`/post/${post.id.slice(0, post.id.lastIndexOf("/")).toLowerCase()}/`}>{post.data.title}</a>
                    </h3>
                    
                    <p class="post-description">
                      {post.data.description}
                    </p>
                    
                    <a href={`/post/${post.id.slice(0, post.id.lastIndexOf("/")).toLowerCase()}/`} class="read-more">
                      閱讀更多
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12h14"/><path d="m12 5 7 7-7 7"/></svg>
                    </a>
                  </div>
                </article>
              ))
            ) : (
              <div class="no-posts">
                <p>暫無相關文章</p>
              </div>
            )}
          </div>
          
          {seriesGroups.length > 0 && (
            <div class="series-blocks">
              <h2 class="other-series-title">其他系列文章</h2>
              {seriesGroups.map(group => (
                <SeriesBlock 
                  title={group.series} 
                  seriesName={group.series}
                  posts={group.posts} 
                  viewAllLink={`/series/${group.path}/`}
                  epicColor={accentColor}
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
    
    <Footer />
  </body>
</html>

<style define:vars={{ accentColor }}>
  .series-container {
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
  }
  
  .main-content {
    display: grid;
    grid-template-columns: 300px minmax(0, 1fr);
    gap: 2rem;
    margin: 2rem 0 3rem;
    max-width: 1400px;
    margin-left: auto;
    margin-right: auto;
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  .sidebar-area {
    width: 300px;
  }
  
  .widget-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .content-area {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
  }
  
  .page-header {
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #eaeaea;
  }
  
  .page-header h1 {
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    color: var(--accentColor);
  }
  
  .page-header p {
    font-size: 1rem;
    color: #666;
    margin: 0;
  }
  
  .posts-list {
    width: 100%;
    margin-bottom: 2rem;
  }
  
  .post-card {
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.3s ease;
    margin-bottom: 1.5rem;
  }
  
  .post-content {
    padding: 1rem 1.5rem;
  }
  
  .post-meta-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px dashed #e2e8f0;
  }
  
  .post-date {
    font-size: 0.875rem;
    color: #718096;
  }
  
  .post-tags {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .tag-list {
    font-size: 0.8rem;
  }
  
  .tag-link {
    color: #4682b4;
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  .tag-link:hover {
    color: var(--accentColor);
  }
  
  .post-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 0.75rem 0;
  }
  
  .post-title a {
    color: #333;
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  .post-title a:hover {
    color: var(--accentColor);
  }
  
  .post-description {
    font-size: 0.95rem;
    color: #555;
    margin-bottom: 1rem;
    line-height: 1.5;
  }
  
  .read-more {
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    font-size: 0.9rem;
    color: var(--accentColor);
    text-decoration: none;
    font-weight: 500;
  }
  
  .read-more:hover {
    opacity: 0.8;
  }
  
  .no-posts {
    padding: 2rem;
    text-align: center;
    color: #666;
    background-color: #f9f9f9;
    border-radius: 8px;
  }
  
  .series-blocks {
    margin-top: 2rem;
  }
  
  .other-series-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 1.5rem 0;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid var(--accentColor);
    color: #333;
  }
  
  @media (max-width: 1200px) {
    .main-content {
      gap: 1.5rem;
    }
  }
  
  @media (max-width: 992px) {
    .main-content {
      grid-template-columns: 1fr;
    }
    
    .sidebar-area {
      width: 100%;
      margin-bottom: 2rem;
    }
  }
</style>

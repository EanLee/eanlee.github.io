<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>測試 on 伊恩的開發狂想</title><link>https://eandev.com/categories/%E6%B8%AC%E8%A9%A6/</link><description>Recent content in 測試 on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Wed, 11 Jan 2023 16:27:42 +0000</lastBuildDate><atom:link href="https://eandev.com/categories/%E6%B8%AC%E8%A9%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 CI 進行自動化測試</title><link>https://eandev.com/post/series/build-automated-deploy/integration-ci-and-unit-test/</link><pubDate>Wed, 11 Jan 2023 16:27:42 +0000</pubDate><guid>https://eandev.com/post/series/build-automated-deploy/integration-ci-and-unit-test/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1906">2019 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/build-automated-deploy/build-ci-cd-from-scratch/">從零開始建立自動化發佈的流水線&lt;/a> 持續整合篇&lt;/p>
&lt;/blockquote>
&lt;p>想達成持續整合(Continuous Integration, CI)的目標，只有單純進行版本控制與建置，就太可惜了。CI 可視為是自動化管控軟體品質的第一道防線，在這個階段，可以整合自動化測試、程式碼掃描分析、資安掃描等動作。&lt;/p>
&lt;p>接著，在本篇文章內章，會淺講單元測試的概念，並試著把單元測試與 CI 整合起來。&lt;/p></description></item><item><title>使用 CI 進行自動化測試</title><link>https://eandev.com/post/series/build-automated-deploy/integration-ci-and-unit-test/</link><pubDate>Wed, 11 Jan 2023 16:27:42 +0000</pubDate><guid>https://eandev.com/post/series/build-automated-deploy/integration-ci-and-unit-test/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1906">2019 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/build-automated-deploy/build-ci-cd-from-scratch/">從零開始建立自動化發佈的流水線&lt;/a> 持續整合篇&lt;/p>
&lt;/blockquote>
&lt;p>想達成持續整合(Continuous Integration, CI)的目標，只有單純進行版本控制與建置，就太可惜了。CI 可視為是自動化管控軟體品質的第一道防線，在這個階段，可以整合自動化測試、程式碼掃描分析、資安掃描等動作。&lt;/p>
&lt;p>接著，在本篇文章內章，會淺講單元測試的概念，並試著把單元測試與 CI 整合起來。&lt;/p></description></item><item><title>淺談負載測試/壓力測試/效能測試報告</title><link>https://eandev.com/post/test/talking-testing-report/</link><pubDate>Fri, 06 Jan 2023 05:36:16 +0000</pubDate><guid>https://eandev.com/post/test/talking-testing-report/</guid><description>&lt;p>當我們好不容易完成了系統的壓力測試，這時候，我們可能需要整理測試數據給相關人員查看，或是報告。&lt;/p>
&lt;p>那在這份報告中，需要要揭露那些資訊呢? 或者說, 受眾會想要看到什麼？這份報告會因為不同的測試目的，呈現的內容與重點也會有所不同。&lt;/p>
&lt;p>接著，我們來聊聊撰寫壓力測試報告的時候，在這份報告裡面會具備哪一些要素。&lt;/p></description></item><item><title>淺談負載測試/壓力測試/效能測試報告</title><link>https://eandev.com/post/test/talking-testing-report/</link><pubDate>Fri, 06 Jan 2023 05:36:16 +0000</pubDate><guid>https://eandev.com/post/test/talking-testing-report/</guid><description>&lt;p>當我們好不容易完成了系統的壓力測試，這時候，我們可能需要整理測試數據給相關人員查看，或是報告。&lt;/p>
&lt;p>那在這份報告中，需要要揭露那些資訊呢? 或者說, 受眾會想要看到什麼？這份報告會因為不同的測試目的，呈現的內容與重點也會有所不同。&lt;/p>
&lt;p>接著，我們來聊聊撰寫壓力測試報告的時候，在這份報告裡面會具備哪一些要素。&lt;/p></description></item><item><title>淺談單元測試的撰寫</title><link>https://eandev.com/post/test/%E6%B7%BA%E8%AB%87%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%9A%84%E6%92%B0%E5%AF%AB/</link><pubDate>Thu, 04 Aug 2022 06:22:43 +0000</pubDate><guid>https://eandev.com/post/test/%E6%B7%BA%E8%AB%87%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%9A%84%E6%92%B0%E5%AF%AB/</guid><description>&lt;p>近年來，在業界各位前輩的推展下，越來越多人知道單元測試，並且開始撰寫單元測試。&lt;/p>
&lt;p>但有些撰寫單元測試過程中，遇到有些經常被人詢問議題，或是自己撰寫過程所遇到困惑點，在這分享個人的觀點。&lt;/p>
&lt;ul>
&lt;li>運用單元測試，讓工具可以自動化一再反覆驗證核心業務邏輯或是高風險的邏輯，以確保業務邏輯或規則的正確性。&lt;/li>
&lt;li>對於沒有測試保護的程式，使用已知的使用情境案例，從修改部份進行最大範圍的框選，運用粗顆粒的測試案例，讓修改部份，有個基本的保護。&lt;/li>
&lt;li>對於需要注入眾多物件的類別，應考量是否需要進行功能切分。減少單元測試的複雜性，提升程式的維護性。&lt;/li>
&lt;/ul></description></item><item><title>淺談壓力測試/負載測試到底要做什麼?</title><link>https://eandev.com/post/test/what-does-load-testing-do/</link><pubDate>Sun, 03 Apr 2022 07:30:13 +0000</pubDate><guid>https://eandev.com/post/test/what-does-load-testing-do/</guid><description>&lt;p>多數的時候，我們可能會將 &lt;code>負載測試(LOAD TESTING)&lt;/code> 與 &lt;code>壓力測試 (STRESS TESTING)&lt;/code> 混在一起討論。&lt;/p>
&lt;p>無論是那種測試，都是基於特定目的的前提，去進行測試計劃的規劃。不同的測試目的，直接影響到預期的測試作法、條件以及測試系統架構。&lt;/p>
&lt;p>透過測試的方式，是將系統效能加以量化。只有量化才有依據，調整或決定後續的處理方式。無論是增加機器、設定監控警告的水位，或是找出品系統瓶頸加以改善優化，&lt;/p></description></item><item><title>淺談壓力測試/負載測試到底要做什麼?</title><link>https://eandev.com/post/test/what-does-load-testing-do/</link><pubDate>Sun, 03 Apr 2022 07:30:13 +0000</pubDate><guid>https://eandev.com/post/test/what-does-load-testing-do/</guid><description>&lt;p>多數的時候，我們可能會將 &lt;code>負載測試(LOAD TESTING)&lt;/code> 與 &lt;code>壓力測試 (STRESS TESTING)&lt;/code> 混在一起討論。&lt;/p>
&lt;p>無論是那種測試，都是基於特定目的的前提，去進行測試計劃的規劃。不同的測試目的，直接影響到預期的測試作法、條件以及測試系統架構。&lt;/p>
&lt;p>透過測試的方式，是將系統效能加以量化。只有量化才有依據，調整或決定後續的處理方式。無論是增加機器、設定監控警告的水位，或是找出品系統瓶頸加以改善優化，&lt;/p></description></item><item><title>[Fluent Assertions] Object graph comparison</title><link>https://eandev.com/post/test/fluent-assertions-object-graph-comparison/</link><pubDate>Thu, 11 Feb 2021 14:00:22 +0000</pubDate><guid>https://eandev.com/post/test/fluent-assertions-object-graph-comparison/</guid><description>&lt;p>日前在撰寫單元測試時，發生測試失敗，使用 &lt;code>Should().BeEquivalentTo(expected)&lt;/code> 進行物件比對，已確認 &lt;code>待測物件&lt;/code> 與 &lt;code>期望物件&lt;/code> 內的資料相同，但卻出現 &lt;code>be it misses&lt;/code> 造成的測試結果&lt;code>失敗&lt;/code>。&lt;/p>
&lt;p>所使用的 FlunentAssertion Nuget 版本為 &lt;code>4.13.1&lt;/code> 。&lt;/p></description></item><item><title>[Fluent Assertions] Object graph comparison</title><link>https://eandev.com/post/test/fluent-assertions-object-graph-comparison/</link><pubDate>Thu, 11 Feb 2021 14:00:22 +0000</pubDate><guid>https://eandev.com/post/test/fluent-assertions-object-graph-comparison/</guid><description>&lt;p>日前在撰寫單元測試時，發生測試失敗，使用 &lt;code>Should().BeEquivalentTo(expected)&lt;/code> 進行物件比對，已確認 &lt;code>待測物件&lt;/code> 與 &lt;code>期望物件&lt;/code> 內的資料相同，但卻出現 &lt;code>be it misses&lt;/code> 造成的測試結果&lt;code>失敗&lt;/code>。&lt;/p>
&lt;p>所使用的 FlunentAssertion Nuget 版本為 &lt;code>4.13.1&lt;/code> 。&lt;/p></description></item></channel></rss>
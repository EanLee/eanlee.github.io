<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>架構 on 伊恩的開發狂想</title><link>https://eandev.com/categories/%E6%9E%B6%E6%A7%8B/</link><description>Recent content in 架構 on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sat, 11 Nov 2023 14:28:57 +0800</lastBuildDate><atom:link href="https://eandev.com/categories/%E6%9E%B6%E6%A7%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker | 縮網址服務實作記錄 (1) - 基於 Docker 容器技術的網站服務架構實踐</title><link>https://eandev.com/post/series/side-project/shorten-1-build-service-base-on-container/</link><pubDate>Sat, 11 Nov 2023 14:28:57 +0800</pubDate><guid>https://eandev.com/post/series/side-project/shorten-1-build-service-base-on-container/</guid><description>縮網址服務為 http://url-ins.com/shorten/ ，有任何想法或回饋，可以在 SurveyCake 留下寶貴的意見。(為了維持主機的維運，在頁面內放入 Google Adsense 廣告。)
🔖 長話短說 🔖
設定 Ubuntu 允許 SSH 使用密碼登入時，除了 /etc/ssh/sshd_config 需要調整，也要檢查 Include 其他的 .conf 是否有覆寫的情況。
使用技術、框架與環境設定如下
網路服務商 Domain: Godaddy 主機平台: Digital Ocean 版控與 Container Registry: GitLab 使用服務: Nginx 1.25.3 Postgresql 16 Grafana 10.2 Loki 2.9.2 使用技術 Vue3 / Astro 3.3 .NET 7 使用相關線上工具
NGINXConfig: Digital Ocean 提供的 Nginx conf 的產生器，可直接使用介面點選後，自動產生對應的 Nginx config。 一、服務環境評估、選擇與服務架構規劃 評估與規劃的先決條件 在初期，維運成本的支出，要盡可能的低。 使用 Docker 進行服務的佈署與管理。 服務只對外開放 80/443 PORT，以及 SSH 22 PORT。 集中收集與分析服務維運時的 LOG。 在維運成本的考量下，初期使用一台主機來建置整個服務系統，並基於 Container 進行佈署與維運。</description></item><item><title>聊聊架構 - 系統負載、分流與限制理論</title><link>https://eandev.com/post/architecture/system-loading-limit-reroute/</link><pubDate>Tue, 26 Jul 2022 17:35:47 +0800</pubDate><guid>https://eandev.com/post/architecture/system-loading-limit-reroute/</guid><description>&lt;p>無論技術決策或解決方案的選擇，經常因為現實環境造成的種種限制條件，導致無法直接使用最優解。需要基於限制條件下，進行相對應的妥協與方案的調整。&lt;/p>
&lt;p>做為系統開發或維運人員，當系統遇到麻煩或困難或瓶頸時，所提出的解決方案或作法，需將先天的限制列入評估。試著在有限的的資源，想辦法得到最大的效率或收益。為此，需要試著找出造成麻煩的瓶頸，加以分析，最終得出解除瓶頸的方案。&lt;/p>
&lt;p>若觀察的視角過小或過於局部，所找到的系統瓶頸，從整個系統視角評估，有時會發現，原先認為的瓶頸，並不是真正的瓶頸問題。為此，可以運用限制理論去找出問題環節，配合 80/20 法則找出影響力最大的點，然後處理它。&lt;/p></description></item><item><title>系統架構演進與 AWS 雲端服務結合(1) - 內部系統快速驗證</title><link>https://eandev.com/post/architecture/cloud/mvp-vaification/</link><pubDate>Fri, 24 Jun 2022 09:17:18 +0800</pubDate><guid>https://eandev.com/post/architecture/cloud/mvp-vaification/</guid><description>&lt;p>假設新創的網路服務提供商，隨著業務的發展，提供服務的軟體系統，從最初的簡易架構，依據面臨的挑戰與需求，不停調整擴充系統架構。&lt;/p>
&lt;p>系統若建立在雲端，隨著系統架構的演進的同時，所對應雲端服務供應商的服務。本文章僅為個人學習與理解雲端服務的手札，有任何更好的建議都歡迎告知。&lt;/p></description></item></channel></rss>
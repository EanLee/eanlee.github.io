<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>開發雜談 on 伊恩的開發狂想</title><link>https://eandev.com/categories/%E9%96%8B%E7%99%BC%E9%9B%9C%E8%AB%87/</link><description>Recent content in 開發雜談 on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Wed, 22 Nov 2023 14:54:54 +0800</lastBuildDate><atom:link href="https://eandev.com/categories/%E9%96%8B%E7%99%BC%E9%9B%9C%E8%AB%87/index.xml" rel="self" type="application/rss+xml"/><item><title>ASP.NET Core | 問題排除隨手記 - UseHttpsRedirection 造成的無限 Redirection (Response Http Status 307)</title><link>https://eandev.com/post/troubleshooting/use-https-redirection-cause-infinite-redirection/</link><pubDate>Wed, 22 Nov 2023 14:54:54 +0800</pubDate><guid>https://eandev.com/post/troubleshooting/use-https-redirection-cause-infinite-redirection/</guid><description>&lt;blockquote>
&lt;p>🔖 長話短說 🔖
在 Reverse Proxy 與 Web API 的架構，若發生無限重定向的問題。請確認 Reverse Proxy 是否固定使用 HTTP 導向 Web API；或 Web API 強制將 HTTP 重定向到 HTTPS。&lt;/p>
&lt;/blockquote>
&lt;p>最近把使用 ASP.NET Core 寫的 Web API 掛到有反向代理(Reverse Proxy) 的系統架構。&lt;/p>
&lt;p>明明 API 就只有單純的回傳資訊，但卻出現在瀏覽器出現 &lt;code>ERR_TOO_MANY_REDIRECTS&lt;/code> 、Postman 出現 &lt;code>Error: Exceeded maxRedirects. Probably stuck in a redirect loop&lt;/code>、或是 Insomnia 出現 &lt;code>Error: Number of redirects hit maximum amount&lt;/code> 的錯誤訊息。&lt;/p>
&lt;p>&lt;figure>
&lt;center>
&lt;img src="./images/broswer-display-ERR_TOO_MANY_REDIRECTS.png" alt="Broswer 錯誤畫面">
&lt;figcaption>Broswer 錯誤畫面&lt;/figcaption>
&lt;/center>
&lt;/figure>
明眼人一看，就知道是 Redirect 重定向過多造成的錯誤。&lt;/p>
&lt;p>而將新開發的 Web API 架設在使用反向代理(Reverse Proxy) 的環境時，遇到這個問題，就順手記錄下來。&lt;/p></description></item><item><title>ASP.NET Core | 問題排除隨手記 - API 回應 HTTP Status 415 Unsupported Media Type</title><link>https://eandev.com/post/troubleshooting/http-response-status-unexpected-note/</link><pubDate>Thu, 09 Mar 2023 16:19:47 +0800</pubDate><guid>https://eandev.com/post/troubleshooting/http-response-status-unexpected-note/</guid><description>&lt;p>有時呼叫 API 時，對方回應的 &lt;code>HTTP Status&lt;/code> 與我們所預期的不同。剛好最近有遇到，就順手記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>&lt;code>415: Unsupported Media Type&lt;/code> 錯誤，請檢查 &lt;code>Content-Type&lt;/code> 與 &lt;code>Content&lt;/code> 與 API 要求的規範是否相同。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>淺談負載測試/壓力測試/效能測試報告</title><link>https://eandev.com/post/test/talking-testing-report/</link><pubDate>Fri, 06 Jan 2023 13:36:16 +0800</pubDate><guid>https://eandev.com/post/test/talking-testing-report/</guid><description>&lt;p>當我們好不容易完成了系統的壓力測試，這時候，我們可能需要整理測試數據給相關人員查看，或是報告。&lt;/p>
&lt;p>那在這份報告中，需要要揭露那些資訊呢? 或者說, 受眾會想要看到什麼？這份報告會因為不同的測試目的，呈現的內容與重點也會有所不同。&lt;/p>
&lt;p>接著，我們來聊聊撰寫壓力測試報告的時候，在這份報告裡面會具備哪一些要素。&lt;/p></description></item><item><title>淺談單元測試的撰寫</title><link>https://eandev.com/post/test/%E6%B7%BA%E8%AB%87%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%9A%84%E6%92%B0%E5%AF%AB/</link><pubDate>Thu, 04 Aug 2022 06:22:43 +0000</pubDate><guid>https://eandev.com/post/test/%E6%B7%BA%E8%AB%87%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E7%9A%84%E6%92%B0%E5%AF%AB/</guid><description>&lt;p>近年來，在業界各位前輩的推展下，越來越多人知道單元測試，並且開始撰寫單元測試。&lt;/p>
&lt;p>但有些撰寫單元測試過程中，遇到有些經常被人詢問議題，或是自己撰寫過程所遇到困惑點，在這分享個人的觀點。&lt;/p>
&lt;ul>
&lt;li>運用單元測試，讓工具可以自動化一再反覆驗證核心業務邏輯或是高風險的邏輯，以確保業務邏輯或規則的正確性。&lt;/li>
&lt;li>對於沒有測試保護的程式，使用已知的使用情境案例，從修改部份進行最大範圍的框選，運用粗顆粒的測試案例，讓修改部份，有個基本的保護。&lt;/li>
&lt;li>對於需要注入眾多物件的類別，應考量是否需要進行功能切分。減少單元測試的複雜性，提升程式的維護性。&lt;/li>
&lt;/ul></description></item><item><title>聊聊架構 - 系統負載、分流與限制理論</title><link>https://eandev.com/post/architecture/system-loading-limit-reroute/</link><pubDate>Tue, 26 Jul 2022 17:35:47 +0800</pubDate><guid>https://eandev.com/post/architecture/system-loading-limit-reroute/</guid><description>&lt;p>無論技術決策或解決方案的選擇，經常因為現實環境造成的種種限制條件，導致無法直接使用最優解。需要基於限制條件下，進行相對應的妥協與方案的調整。&lt;/p>
&lt;p>做為系統開發或維運人員，當系統遇到麻煩或困難或瓶頸時，所提出的解決方案或作法，需將先天的限制列入評估。試著在有限的的資源，想辦法得到最大的效率或收益。為此，需要試著找出造成麻煩的瓶頸，加以分析，最終得出解除瓶頸的方案。&lt;/p>
&lt;p>若觀察的視角過小或過於局部，所找到的系統瓶頸，從整個系統視角評估，有時會發現，原先認為的瓶頸，並不是真正的瓶頸問題。為此，可以運用限制理論去找出問題環節，配合 80/20 法則找出影響力最大的點，然後處理它。&lt;/p></description></item><item><title>簡述程式碼品質與優化方向</title><link>https://eandev.com/post/series/coding-skill/coding-basic-skills/</link><pubDate>Tue, 21 Jun 2022 15:06:43 +0000</pubDate><guid>https://eandev.com/post/series/coding-skill/coding-basic-skills/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1430">2018 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/coding-skill/foreword/#基礎篇">持續優化程式碼品質-總覽&lt;/a>基礎篇&lt;/p>
&lt;/blockquote>
&lt;p>在開發時，為了快速或是避免麻煩，可能會用簡單的代號，例如 &lt;code>aa&lt;/code> 這種名稱，來暫時做為變數的名稱。這無可厚非，但是&amp;hellip;假若在完成該功能後，未能進行程式的整理。&lt;/p>
&lt;p>也許在三個月後的某一天，程式有需求變動，不管是要修改自己開發的程式，還是要維護前人遺留下來的軟體。在一番苦戰，好不容易找到要修改變動的程式區塊。&lt;/p>
&lt;p>看著各種無意義的命名、複雜且混亂的程式邏輯，只能苦苦的思考，為什麼當初會這樣寫？這個變數是什麼意義？動作背後的用意？邊改寫程式，邊幹譙當初寫下這段程式的人。&lt;/p></description></item><item><title>開發雜談 - 對於系統架構的多維度思考能力</title><link>https://eandev.com/post/experiences/multi-dimensional-thinking-for-system-architecture/</link><pubDate>Sun, 19 Jun 2022 01:10:57 +0800</pubDate><guid>https://eandev.com/post/experiences/multi-dimensional-thinking-for-system-architecture/</guid><description>&lt;p>在研究某個軟體的系統架構，發現一個值得探討的問題。&lt;/p>
&lt;p>當設計系統架構時，使用何種的視界去分析與設計，會得到不一樣的設計結果，但結果是否為當下最佳的解決方案？&lt;/p></description></item><item><title>開發雜談 - API Server 有非預期的請求的原因釐清</title><link>https://eandev.com/post/experiences/unexpected-request/</link><pubDate>Fri, 10 Jun 2022 12:00:00 +0800</pubDate><guid>https://eandev.com/post/experiences/unexpected-request/</guid><description>&lt;p>某天 Infra 人員發現還沒對外正式開放的環境，API Server 內的硬碟空間，在短短半個月內，被 IIS Log 吃掉近 20GB 的空間，協同開發人員一同釐清這現象的原因。&lt;/p></description></item><item><title>淺談壓力測試/負載測試到底要做什麼?</title><link>https://eandev.com/post/test/what-does-load-testing-do/</link><pubDate>Sun, 03 Apr 2022 15:30:13 +0800</pubDate><guid>https://eandev.com/post/test/what-does-load-testing-do/</guid><description>&lt;p>多數的時候，我們可能會將 &lt;code>負載測試(LOAD TESTING)&lt;/code> 與 &lt;code>壓力測試 (STRESS TESTING)&lt;/code> 混在一起討論。&lt;/p>
&lt;p>無論是那種測試，都是基於特定目的的前提，去進行測試計劃的規劃。不同的測試目的，直接影響到預期的測試作法、條件以及測試系統架構。&lt;/p>
&lt;p>透過測試的方式，是將系統效能加以量化。只有量化才有依據，調整或決定後續的處理方式。無論是增加機器、設定監控警告的水位，或是找出品系統瓶頸加以改善優化，&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>軟體開發 on 伊恩的開發狂想</title><link>https://eandev.com/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/</link><description>Recent content in 軟體開發 on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 05 Jan 2023 02:42:57 +0000</lastBuildDate><atom:link href="https://eandev.com/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/index.xml" rel="self" type="application/rss+xml"/><item><title>[.NET Core] Web API 的 Post-Redirect-Get 實作與注意事項</title><link>https://eandev.com/post/develop/post-redirect-get/</link><pubDate>Thu, 05 Jan 2023 02:42:57 +0000</pubDate><guid>https://eandev.com/post/develop/post-redirect-get/</guid><description>&lt;p>最近因為工作需求，需要提供一支使用 &lt;code>POST&lt;/code> 方法的 Web API，並在處理完成任務後，轉導到其他的網頁。&lt;/p>
&lt;p>但在使用 Postman 測試的過程，因為 POC 轉導到 google 時，回應 &lt;code>405 Method Not Allow&lt;/code> 的狀態，所以研究的過程特別記錄下來。&lt;/p>
&lt;p>📣 TL;DR&lt;/p>
&lt;ol>
&lt;li>使用 Postman 測試 Redirect 時，要注意 &lt;code>Follow original HTTP Method&lt;/code> 的選項是否開啟。&lt;/li>
&lt;li>要確認被轉導的 Url 允許的 HTTP 方法有那些。否則會被回 &lt;code>405 Method Not Allow&lt;/code>&lt;/li>
&lt;/ol></description></item><item><title>淺談 YAML 格式</title><link>https://eandev.com/post/series/build_automated_deploy/yaml/</link><pubDate>Fri, 29 Jul 2022 06:12:44 +0000</pubDate><guid>https://eandev.com/post/series/build_automated_deploy/yaml/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://eandev.com/post/series/build_automated_deploy/foreword/#額外補充">從零開始建立自動化發佈的流水線&lt;/a> 額外補充&lt;/p>
&lt;/blockquote>
&lt;p>當在進行 CI/CD 工具的 pipelines 或軟體組態設定時，可能都有機會看到 YAML 格式撰寫的設定檔。下面簡單的聊聊 YAML 撰寫規則。&lt;/p></description></item><item><title>程式碼版控 - 觀念與 Git 簡述</title><link>https://eandev.com/post/series/build_automated_deploy/version_control/</link><pubDate>Fri, 29 Jul 2022 10:14:10 +0800</pubDate><guid>https://eandev.com/post/series/build_automated_deploy/version_control/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://eandev.com/post/series/build_automated_deploy/foreword/#版控篇">從零開始建立自動化發佈的流水線&lt;/a> 版控篇&lt;/p>
&lt;/blockquote>
&lt;p>當軟體持續發展，難免出現客制化需求，或是要求針對特定版本進行功能異動，尤其是團隊協作的情況下，有沒有那種方式可以提供有效的統整現有的程式碼，讓協作開發人員，都可以取得最新的開發版本。也可以快速的調出過往的程式異動版本，以便追查問題或調整。&lt;/p></description></item><item><title>Queue 佇列的概念</title><link>https://eandev.com/post/series/messagequeue/host/queue/</link><pubDate>Tue, 14 Jun 2022 07:46:41 +0000</pubDate><guid>https://eandev.com/post/series/messagequeue/host/queue/</guid><description>&lt;p>個人認為佇列(Queue)的本質，就是做為資料載體的暫存與緩衝區，同時，它具備 &lt;strong>先進先出(First In First Out, FIFO)&lt;/strong> 的特性。&lt;/p>
&lt;p>在演算法中，有些演算法使用 Queue 做為操作記錄資料的載體，例如針對二元樹的尋訪(Traversal)，廣度優先搜尋(Breadth First Search)，都是活用 Queue FIFO 的特性。&lt;/p>
&lt;p>有時，資料本身的數量有限，但同時有多個對象需要取得資料。使用 Queue 來控制資料的處理速度，或是調配資源的的方式，作為資料配置最佳化的方式之一。&lt;/p>
&lt;p>經常運用於跨執行緒、跨行程、跨系統之中的通訊使用。在這種場域下，產生資料與處理資料的兩方，處理的速度不一相同。借由 Queue 的暫存緩衝與 FIFO 特性，便於採用非同步的處理方式。&lt;/p></description></item><item><title>軟體開發需求釐清</title><link>https://eandev.com/post/software/requirements_clarify/</link><pubDate>Sun, 02 Jan 2022 19:10:58 +0000</pubDate><guid>https://eandev.com/post/software/requirements_clarify/</guid><description>&lt;p>當接到一個新的需求或新的任務，對需求/任務的內容、牽扯到人、事、物，絕大多的情況，或許明白部份的情況，但無法全盤明確情況。&lt;/p>
&lt;p>從一開始不了解需求，因為無知所產生的不安與焦慮。會隨著專案的進行，越來越來了解詳細的內容，就會變得平穩。但若中途發現有些部份的問題沒有考量到、或是誤解部份的需求，但交付期限將近，這時的感覺一定很差。&lt;/p>
&lt;p>而且發生非預期的意外或誤解需求時，立即盤點影響範圍時，卻發現待解決的事項，無法在預定時程內完成，只好宣告失敗，再次爭取新的資源與時間。或是使用加班技能，交付一個自己都不滿意，但勉強可以符合需求的結果。&lt;/p>
&lt;p>隨著專案的進行，從一開始不了解需求，因為無知所產生的不安與焦慮。會隨著專案的進行，越來越來了解詳細的內容，就會變得平穩。往往在專案結束後的回顧時，不禁會想到有些情況，若能提早知道，就可以避免無效的作工。&lt;/p>
&lt;p>雖然，無法精確知道專案開發內，所有可能會遭遇到的難題或卡點，卻可以藉由啟動前的盤點與分析，嘗試看見全貌，提先鎖定需求或作法不明確的範圍，提早知道可能遇到的瓶頸，限定問題發生範圍。&lt;/p>
&lt;p>以下分享的部份，是個人針對新專案需求的處理方式，若有更好的方式，也歡迎分享。&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>軟體開發 on 伊恩的開發狂想</title><link>https://eandev.com/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/</link><description>Recent content in 軟體開發 on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Fri, 17 Nov 2023 16:38:06 +0800</lastBuildDate><atom:link href="https://eandev.com/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker | 縮網址服務實作記錄 (2) - 基於 Docker 的 Let's Encrypt 申請與設定</title><link>https://eandev.com/post/series/side-project/shorten-2-lets-encrypt-setting/</link><pubDate>Fri, 17 Nov 2023 16:38:06 +0800</pubDate><guid>https://eandev.com/post/series/side-project/shorten-2-lets-encrypt-setting/</guid><description>&lt;blockquote>
&lt;p>縮網址服務為 &lt;a href="https://url-ins.com/shorten/">https://url-ins.com/shorten/&lt;/a> ，有任何想法或回饋，可以在 &lt;a href="https://www.surveycake.com/s/wgveX">SurveyCake&lt;/a> 留下寶貴的意見。(為了維持主機的維運，在頁面內放入 Google Adsense 廣告。)&lt;/p>
&lt;/blockquote>
&lt;p>在 &lt;a href="../../../Publish/Series/side-project/%E7%B8%AE%E7%B6%B2%E5%9D%80%E6%9C%8D%E5%8B%99%E5%AF%A6%E4%BD%9C%E8%A8%98%E9%8C%84(1)%20-%20%E5%9F%BA%E6%96%BC%20Docker%20%E5%AE%B9%E5%99%A8%E6%8A%80%E8%A1%93%E7%9A%84%E7%B6%B2%E7%AB%99%E6%9C%8D%E5%8B%99%E6%9E%B6%E6%A7%8B%E5%AF%A6%E8%B8%90.md">縮網址服務實作記錄(1) - 基於 Docker 容器技術的網站服務架構實踐&lt;/a> 中，已經完成基本服務的建立。&lt;/p>
&lt;p>為了確保服務站台的可靠性與提升 SEO。接下來，就是要為服務站台增加 HTTPS 的 SSL/TLS 憑證保護。&lt;/p>
&lt;p>&lt;code>Let's Encrypt&lt;/code> 提供的免費的 SSL/TLS 憑證，雖然說有 3 個月的時間限制。但只要配合 &lt;code>Certbot&lt;/code> 來協助 SSL/TLS 憑證申請與更新，就可以為站台提供更可靠的保護。&lt;/p>
&lt;p>有趣的是，在研究與尋找如何進行 Ngnix 與 Let&amp;rsquo;s Encrypt 設定的過程，無意中發現 &lt;a href="https://traefik.io/">&lt;code>Traefik&lt;/code>&lt;/a>。一套高度支援 Dockr ，與 Ngnix 相似的反向代理工具(Reverse Proxy)，後續有機會使用，也會隨手記錄操作筆記。&lt;/p>
&lt;blockquote>
&lt;p>在本篇文章中，主要是在討論以下的項目&lt;/p>
&lt;ul>
&lt;li>如何為 Container 內的 NGINX 進行 Let&amp;rsquo;s Encrypt 的設定。&lt;/li>
&lt;li>使用 Certbot 官方提供的 docker Image 來申請 SSL/TLS 憑證。&lt;/li>
&lt;li>Docker 的 Volume 的用法。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docker | 縮網址服務實作記錄 (1) - 基於 Docker 容器技術的網站服務架構實踐</title><link>https://eandev.com/post/series/side-project/shorten-1-build-service-base-on-container/</link><pubDate>Sat, 11 Nov 2023 14:28:57 +0800</pubDate><guid>https://eandev.com/post/series/side-project/shorten-1-build-service-base-on-container/</guid><description>&lt;blockquote>
&lt;p>縮網址服務為 &lt;a href="https://url-ins.com/shorten/">https://url-ins.com/shorten/&lt;/a> ，有任何想法或回饋，可以在 &lt;a href="https://www.surveycake.com/s/wgveX">SurveyCake&lt;/a> 留下寶貴的意見。(為了維持主機的維運，在頁面內放入 Google Adsense 廣告。)&lt;/p>
&lt;/blockquote>
&lt;p>在這一篇文章的內容，主要的內容包含以下項目。&lt;/p>
&lt;ol>
&lt;li>建立系統服務的評估架構規劃。&lt;/li>
&lt;li>Ubuntu 的防火牆設定、使用者密碼/ SSH Key 的認證設定。&lt;/li>
&lt;li>在 Docker 中，利用 Docker network 進行網段劃份，以控制服務之間的訪問。&lt;/li>
&lt;li>使用 Docker Hub 以外的 Container Registry，進行 Docker Image 管理。&lt;/li>
&lt;li>Grafana 與 Loki 的設定方式。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;p>設定 Ubuntu 允許 SSH 使用密碼登入時，除了 &lt;code>/etc/ssh/sshd_config&lt;/code> 需要調整，也要檢查 Include 其他的 &lt;code>.conf&lt;/code> 是否有覆寫的情況。&lt;/p>
&lt;p>若是在要 Docker Compose 使用的 &lt;code>yaml&lt;/code> 檔中，宣告使用外部的 docker network，記得加上 &lt;code>external: true&lt;/code>&lt;/p>
&lt;/blockquote></description></item><item><title>EF Core | 使用 T4 CodeTemplate 客制化 EFCore Scaffold 產出內容</title><link>https://eandev.com/post/develop/dotnet-ef-core-customized-dbcontext-entity/</link><pubDate>Thu, 29 Jun 2023 09:22:03 +0800</pubDate><guid>https://eandev.com/post/develop/dotnet-ef-core-customized-dbcontext-entity/</guid><description>&lt;p>接續 DBContext 操作的議題，目前已知現有的資料庫內，所有的表格都有 &lt;code>CreatedAt&lt;/code>、&lt;code>UpdatedAt&lt;/code>、&lt;code>UpdatedUser&lt;/code>、 &lt;code>IsDeleted&lt;/code> 四個特定字詞結尾的欄位，額外記錄資料異動記錄。&lt;/p>
&lt;p>在「&lt;a href="https://eandev.com/post/develop/dfcore-dbcontext-hasqueryfilter/">使用 HasQueryFilter 限定 DBContext 查詢內容&lt;/a>」中，提到如何透過 &lt;code>HasQueryFilter&lt;/code> 來簡化資料庫查詢的動作。&lt;/p>
&lt;p>接下來，想要再進一步的封裝 EFCore 所使用的 Entity，讓這四個欄位的資訊，不要曝露於 DBContext 的操作中。&lt;/p>
&lt;p>針對客制化 EFCore 的 DBContext 與 Entity Type，將相關的實作內容記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>若是覺得用 &lt;code>dotnet ef dbcontext scaffold&lt;/code> 的指令來建立 DBContext 不方便，在 Visual Studo 可以安裝 &lt;a href="https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools">&lt;code>EF Core Power Tool&lt;/code>&lt;/a> Extension 套件，以 GUI 進階設定 DBContext 的建立內容。&lt;/li>
&lt;li>針對 DBContext 的查詢要進行過濾，可在 DBContext 內的 &lt;code>OnModelCreatingPartial(ModelBuilder modelBuilder)&lt;/code> 進行過濾。&lt;/li>
&lt;li>若要使用 EFCore 的 Shadow Property 來隱藏並操作資料，需要&lt;strong>規範資料庫欄位的格式&lt;/strong>，避免 CodeTemplate 解析錯誤，以及 EF Core 更新資料發生錯誤。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>EF Core | 使用 HasQueryFilter 限定 DBContext 查詢內容</title><link>https://eandev.com/post/develop/dfcore-dbcontext-hasqueryfilter/</link><pubDate>Mon, 19 Jun 2023 03:17:17 +0800</pubDate><guid>https://eandev.com/post/develop/dfcore-dbcontext-hasqueryfilter/</guid><description>&lt;p>前些時間，在幫朋友改造現有倉儲系統時，發現現有資料庫內，所有的表格都有四個作為異動記錄使用的固定欄位。&lt;/p>
&lt;p>導致查詢這些資料時，需要針對這些欄位內的數值，去做進行過濾的動作。&lt;/p>
&lt;p>雖然以前經常使用 &lt;code>Where&lt;/code> 與自定義的 &lt;code>IQueryable Extension Methods&lt;/code> 來過濾資料，但是總會想要再更精簡開發要寫的程式碼。剛好發現 Entity Framework Core 在 2.0 版之後，提供了一個 Gobal Query Filter 的作法。&lt;/p>
&lt;p>就順便把實驗過程與踩到的坑，順手記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>Entity Framework 常見過濾查詢資料作法有 &lt;code>Where&lt;/code> 與自定義的 &lt;code>IQueryable Extension Methods&lt;/code> 。&lt;/li>
&lt;li>EF Core 2.0 之後提供 &lt;code>HasQueryFilter&lt;/code> 的方法，可針對 Entity 的任何查詢，進行套用 Linq 運算式。&lt;/li>
&lt;li>若要排除 &lt;code>HasQueryFilter&lt;/code> 的影響，可以在 DBContext.Entites 加上 &lt;code>.IgnoreQueryFilters()&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>ASP.NET Core | 封裝 DI 的註冊行為時，同時使用外部參數來建立不同物件</title><link>https://eandev.com/post/develop/di-encapsulate-service-and-use-external-parameters/</link><pubDate>Wed, 14 Jun 2023 12:56:50 +0800</pubDate><guid>https://eandev.com/post/develop/di-encapsulate-service-and-use-external-parameters/</guid><description>&lt;p>當發現一個 .NET Core 的類別，其所有方法均需要相同的參數資料，這時，我們就會想到從 DI 下手，在建立物件時，一併把參數傳入。這樣就不需要在調用方式時，還要重複的傳入參數。&lt;/p>
&lt;p>為了隱藏服務的實現細節，將 DI 的服務註冊行為加以封裝，但又需要 WebApi 的 HttpContext 內的參數，建立對應的物件。&lt;/p>
&lt;p>在這篇文章紀錄了直接使用 IHttpContextAccessor 和封裝 DI 所需的參數，兩筆不同的作法。筆者個人推薦後者的作法。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>若將 DI 的註冊行為封裝，但又需要傳入外部參數時，可使用 &lt;code>interface&lt;/code> ，在取得參數資料的同時，隔離實作的細節。&lt;/li>
&lt;li>若 &lt;code>IHttpContextAccessor&lt;/code> 未定義是，需要引用 &lt;code>Microsoft.AspNetCore.Http&lt;/code> Nuget 套件。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>運用 ChapGpt 以 Pair-programing 輔助程式開發</title><link>https://eandev.com/post/develop/develop-assistant-chatgpt/</link><pubDate>Wed, 15 Mar 2023 14:00:03 +0800</pubDate><guid>https://eandev.com/post/develop/develop-assistant-chatgpt/</guid><description>&lt;p>最近在寫 Side Project 時，使用之前完全沒有接觸過的 Futter 來撰寫 APP，同時配合 ChapGPT 一同 Pair-Programming。&lt;/p>
&lt;p>順手記錄與分享，在這過程中，學習到如何運用 ChatGPT 協同開發的使用方式。若是使用 ChapGPT 方式沒抓對，造成回答被中斷或答非所問，就會事倍功半。&lt;/p>
&lt;p>本記錄是針對 &lt;code>GPT-3.5&lt;/code> 的使用經驗，至於 &lt;code>GPT-4&lt;/code> 還沒有交手過，無從得知。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>盡可能的縮減問題的回答範圍，避免無法一次性回答。&lt;/li>
&lt;li>若無法確定問題的回答範圍，讓 ChapGPT 以條列性回答，並避免回答細節。&lt;/li>
&lt;li>ChatGPT 有時會自行回答問題以外的內容，若要避免這個問題，要在 &lt;em>prompt&lt;/em> 中加入回答的限制。&lt;/li>
&lt;li>ChapGPT 的 &lt;em>prompt&lt;/em> 有長度限制，source code 要分段傳入。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>ASP.NET Core | API 回應 HTTP Status 非預期的原因筆記</title><link>https://eandev.com/post/develop/http-response-status-unexpected-note/</link><pubDate>Thu, 09 Mar 2023 16:19:47 +0800</pubDate><guid>https://eandev.com/post/develop/http-response-status-unexpected-note/</guid><description>&lt;p>有時呼叫 API 時，對方回應的 &lt;code>HTTP Status&lt;/code> 與我們所預期的不同。剛好最近有遇到，就順手記錄下來。後續有遇到其他情況，會再更新內容。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>&lt;code>415: Unsupported Media Type&lt;/code> 錯誤，請檢查 &lt;code>Content-Type&lt;/code> 與 &lt;code>Content&lt;/code> 與 API 要求的規範是否相同。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>ASP.NET Core | 使用 DI 注入時，使用 Request 的參數，建立不同參數的物件</title><link>https://eandev.com/post/develop/di-service-provider-httpcontextaccessor/</link><pubDate>Sun, 19 Feb 2023 11:19:21 +0800</pubDate><guid>https://eandev.com/post/develop/di-service-provider-httpcontextaccessor/</guid><description>&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>使用 .NET 內建的 &lt;a href="https://github.com/aspnet/DependencyInjection">Microsoft.Extensions.DependencyInjection&lt;/a> 時，若想要額外設定加初始動作，可使用 &lt;code>IServiceProvider&lt;/code> 或 &lt;code>IServiceProviderFactory&lt;/code>&lt;/li>
&lt;li>若想在 Middleware pipeline 之外的地方取得 &lt;code>HttpContext&lt;/code>，可使用 &lt;code>HttpContextAccessor&lt;/code>。&lt;/li>
&lt;li>可使用 &lt;code>IServiceProvider.GetService&amp;lt;IHttpContextAccessor&amp;gt;()&lt;/code> 取得 HttpContextAccessor。&lt;/li>
&lt;li>在 DI 設定物件的生命週期時，運用 Lambda 方法，配合 &lt;code>IServiceProvider&lt;/code> 參數，來調整建立物件的細部設定。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>EF Core | 使用 dotnet-ef 建立 SQL Server on Docker 的 DBContext</title><link>https://eandev.com/post/develop/dotnet-ef-sqlserver/</link><pubDate>Tue, 14 Feb 2023 18:12:33 +0800</pubDate><guid>https://eandev.com/post/develop/dotnet-ef-sqlserver/</guid><description>&lt;p>在 &lt;a href="https://eandev.com/post/develop/dotnet-ef-postgresql-dbcontext/">使用 dotnet-ef 建立 PostgreSQL 的 DBContext&lt;/a> 之後，也嘗試從 SQL Server on Docker 建立 DBContext，就順手把過程中遇到的小問題記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>使用 Docker 建立的 SQL Server，若需要進行 bak 的備份與還原時，在執行 Container 時，別忘了 mount 資料夾。&lt;/li>
&lt;li>使用 &lt;code>dotnet ef dbcontext scaffold&lt;/code> 時，發生 &lt;code>此憑證鏈結是由不受信任的授權單位發出的&lt;/code> 的差異，請在連線字串內加入 &lt;code>TrustServerCertificate=true&lt;/code>。&lt;/li>
&lt;li>使用 &lt;code>dotnet ef dbcontext scaffold&lt;/code> 時，發生 &lt;code>Login failed for user&lt;/code> 的名稱與連線字串內的 &lt;code>User Id&lt;/code> 不同時，請確認連線字串內的 &lt;code>Trusted_Connection&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>EF Core | 使用 dotnet-ef 建立 PostgreSQL 的 DBContext</title><link>https://eandev.com/post/develop/dotnet-ef-postgresql-dbcontext/</link><pubDate>Mon, 13 Feb 2023 12:13:02 +0800</pubDate><guid>https://eandev.com/post/develop/dotnet-ef-postgresql-dbcontext/</guid><description>&lt;p>若是有使用過 Entity Framework, EF 的經驗，必然對 &lt;code>DBContext&lt;/code> 類別有所了解。在 EF 時可以使用 Visual Studo 的 UI 工具，以 Database-First 的方式建立 DBContext。&lt;/p>
&lt;p>本篇文章則是記錄 Database-First 的開發方式下，EF Core 如何使用 CLI 來產生 DBContext。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>EF Core 要操作 PostgreSQL 的話，可使用 &lt;code>Npgsql.EntityFrameworkCore.PostgreSQL&lt;/code>&lt;/li>
&lt;li>可使用 &lt;code>dotnet tool update --global dotnet-ef&lt;/code> 進行 &lt;code>dotnet-ef&lt;/code> 版本更新&lt;/li>
&lt;li>可使用 &lt;code>dotnet ef dbcontext scffold&lt;/code> 的指令，協助從資料庫已存在的 Schema 產生對應的 dbcontext。&lt;/li>
&lt;li>若專案內未參考 &lt;code>Microsoft.EntityFrameworkCore.Design&lt;/code> 的話，&lt;code>dotnet ef dbcontext scffold&lt;/code> 無法順利動作。&lt;/li>
&lt;li>機敏性資料，可使用 &lt;code>user-secrets&lt;/code> 工具。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>使用 IIS 進行 SSL 憑證的申請與更新的步驟與注意事項</title><link>https://eandev.com/post/security/using-iis-create-and-complete-csr/</link><pubDate>Fri, 03 Feb 2023 11:43:18 +0800</pubDate><guid>https://eandev.com/post/security/using-iis-create-and-complete-csr/</guid><description>&lt;p>日前在使用 IIS 10 進行 SSL 伺服器憑證的申請與更新作業時，發生 IIS &lt;code>完成憑證請求&lt;/code> 後，進行 F5 重整時，憑證消失的問題。在排查過程中，發現一些有趣的地方，所以將其特別記錄下來。&lt;/p>
&lt;p>在這篇文章中，主要使用 IIS 來進行操作，在實務上，也可選擇使用 &lt;code>openssl&lt;/code> 指令的方式來建立 &lt;code>csr&lt;/code> 與 &lt;code>pfx&lt;/code> 檔案。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;p>使用 IIS 進行&lt;code>建立憑證請求&lt;/code>與&lt;code>完成憑證請求&lt;/code>作業，務必使用同一台主機。否則會發生無法&lt;code>完成憑證請求&lt;/code>的問題。&lt;/p>
&lt;p>若是 SSL 憑證需要安裝到多台主機，在&lt;code>完成憑證請求&lt;/code>作業後，請到 &lt;code>主控台\憑證(本機電腦)\個人&lt;/code>的位置，將憑證連同私鑰一同滙出。&lt;/p>
&lt;p>在使用 IIS 完成&lt;code>建立憑證請求&lt;/code>後，從管理主機台的 &lt;code>憑證註冊要求&lt;/code> 可以看到 CSR 對應的憑證資料。若是沒有資料，後續 IIS 的 &lt;code>完成憑證請求&lt;/code> 無法順利完成，會出現重整後就消失的情況。&lt;/p>
&lt;/blockquote></description></item><item><title>物件導向設計原則</title><link>https://eandev.com/post/series/coding-skill/oop-practice/</link><pubDate>Mon, 16 Jan 2023 12:05:34 +0800</pubDate><guid>https://eandev.com/post/series/coding-skill/oop-practice/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1430">2018 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/coding-skill/foreword/#物件導向設計篇-object-oriented">持續優化程式碼品質-總覽&lt;/a>物件導向設計篇&lt;/p>
&lt;/blockquote>
&lt;p>知道物件導向的特性，就可以寫出具備&lt;strong>閱讀性&lt;/strong>、&lt;strong>維謢性&lt;/strong>、&lt;strong>擴充性&lt;/strong>的程式碼？&lt;/p>
&lt;p>夢想很豐滿、現實很骨感。就算已經熟悉物件導向的特性，但在實務上還是很難寫寫出具備閱讀性、維謢性、擴充性的程式碼。常見的因素有…&lt;/p>
&lt;ul>
&lt;li>為了方便，類別函數全部設為 Public。(未有效使用&lt;strong>封裝&lt;/strong>的特性。)&lt;/li>
&lt;li>單一類別中，混雜了許多功能，導至要修改特定功能時，相關程式碼的變動量過大。(高耦合、不符合&lt;strong>單一職責&lt;/strong>)&lt;/li>
&lt;li>資料與商業邏輯混雜在一起。(高耦合)&lt;/li>
&lt;li>當出現特定需求變更時，直接變更原本程式碼。除了可能改壞原本程式功能外，也會增加維護上的麻煩。&lt;/li>
&lt;/ul>
&lt;p>當然還有許多因素，是筆者沒有想到或是沒有列出來的。&lt;/p></description></item><item><title>ASP.NET Core | Web API 的 Post-Redirect-Get 實作與注意事項</title><link>https://eandev.com/post/develop/post-redirect-get/</link><pubDate>Thu, 05 Jan 2023 10:42:57 +0800</pubDate><guid>https://eandev.com/post/develop/post-redirect-get/</guid><description>&lt;p>最近因為工作需求，需要提供一支使用 &lt;code>POST&lt;/code> 方法的 Web API，並在處理完成任務後，轉導到其他的網頁。&lt;/p>
&lt;p>但在使用 Postman 測試的過程，因為 POC 轉導到 google 時，回應 &lt;code>405 Method Not Allow&lt;/code> 的狀態，所以研究的過程特別記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>使用 Postman 測試 Redirect 時，要注意 &lt;code>Follow original HTTP Method&lt;/code> 的選項是否開啟。&lt;/li>
&lt;li>要確認被轉導的 Url 允許的 HTTP 方法有那些。否則會被回 &lt;code>405 Method Not Allow&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>淺談 YAML 格式</title><link>https://eandev.com/post/series/build-automated-deploy/yaml/</link><pubDate>Fri, 29 Jul 2022 14:12:44 +0800</pubDate><guid>https://eandev.com/post/series/build-automated-deploy/yaml/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1906">2019 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/build-automated-deploy/build-ci-cd-from-scratch/#額外補充">從零開始建立自動化發佈的流水線&lt;/a> 額外補充&lt;/p>
&lt;/blockquote>
&lt;p>當在進行 CI/CD 工具的 pipelines 或軟體組態設定時，可能都有機會看到 YAML 格式撰寫的設定檔。下面簡單的聊聊 YAML 撰寫規則。&lt;/p></description></item><item><title>程式碼版控 - 觀念與 Git 簡述</title><link>https://eandev.com/post/series/build-automated-deploy/version_control/</link><pubDate>Fri, 29 Jul 2022 10:14:10 +0800</pubDate><guid>https://eandev.com/post/series/build-automated-deploy/version_control/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1906">2019 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/build-automated-deploy/build-ci-cd-from-scratch/#版控篇">從零開始建立自動化發佈的流水線&lt;/a> 版控篇&lt;/p>
&lt;/blockquote>
&lt;p>當軟體持續發展，難免出現客制化需求，或是要求針對特定版本進行功能異動，尤其是團隊協作的情況下，有沒有那種方式可以提供有效的統整現有的程式碼，讓協作開發人員，都可以取得最新的開發版本。也可以快速的調出過往的程式異動版本，以便追查問題或調整。&lt;/p></description></item><item><title>Queue 佇列的概念</title><link>https://eandev.com/post/series/message-queue/queue/</link><pubDate>Tue, 14 Jun 2022 15:46:41 +0800</pubDate><guid>https://eandev.com/post/series/message-queue/queue/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/2172">第 11 屆(2020) iThome 鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/message-queue/foreword/#基礎篇">從零開始土炮 MQ&lt;/a> 基礎篇&lt;/p>
&lt;/blockquote>
&lt;p>個人認為佇列(Queue)的本質，就是做為資料載體的暫存與緩衝區，同時，它具備 &lt;strong>先進先出(First In First Out, FIFO)&lt;/strong> 的特性。&lt;/p>
&lt;p>在演算法中，有些演算法使用 Queue 做為操作記錄資料的載體，例如針對二元樹的尋訪(Traversal)，廣度優先搜尋(Breadth First Search)，都是活用 Queue FIFO 的特性。&lt;/p>
&lt;p>有時，資料本身的數量有限，但同時有多個對象需要取得資料。使用 Queue 來控制資料的處理速度，或是調配資源的的方式，作為資料配置最佳化的方式之一。&lt;/p>
&lt;p>經常運用於跨執行緒、跨行程、跨系統之中的通訊使用。在這種場域下，產生資料與處理資料的兩方，處理的速度不一相同。借由 Queue 的暫存緩衝與 FIFO 特性，便於採用非同步的處理方式。&lt;/p></description></item><item><title>軟體開發需求釐清</title><link>https://eandev.com/post/software/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E9%9C%80%E6%B1%82%E9%87%90%E6%B8%85/</link><pubDate>Sun, 02 Jan 2022 19:10:58 +0000</pubDate><guid>https://eandev.com/post/software/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E9%9C%80%E6%B1%82%E9%87%90%E6%B8%85/</guid><description>&lt;p>當接到一個新的需求或新的任務，對需求/任務的內容、牽扯到人、事、物，絕大多的情況，或許明白部份的情況，但無法全盤明確情況。&lt;/p>
&lt;p>從一開始不了解需求，因為無知所產生的不安與焦慮。會隨著專案的進行，越來越來了解詳細的內容，就會變得平穩。但若中途發現有些部份的問題沒有考量到、或是誤解部份的需求，但交付期限將近，這時的感覺一定很差。&lt;/p>
&lt;p>而且發生非預期的意外或誤解需求時，立即盤點影響範圍時，卻發現待解決的事項，無法在預定時程內完成，只好宣告失敗，再次爭取新的資源與時間。或是使用加班技能，交付一個自己都不滿意，但勉強可以符合需求的結果。&lt;/p>
&lt;p>隨著專案的進行，從一開始不了解需求，因為無知所產生的不安與焦慮。會隨著專案的進行，越來越來了解詳細的內容，就會變得平穩。往往在專案結束後的回顧時，不禁會想到有些情況，若能提早知道，就可以避免無效的作工。&lt;/p>
&lt;p>雖然，無法精確知道專案開發內，所有可能會遭遇到的難題或卡點，卻可以藉由啟動前的盤點與分析，嘗試看見全貌，提先鎖定需求或作法不明確的範圍，提早知道可能遇到的瓶頸，限定問題發生範圍。&lt;/p>
&lt;p>以下分享的部份，是個人針對新專案需求的處理方式，若有更好的方式，也歡迎分享。&lt;/p></description></item></channel></rss>
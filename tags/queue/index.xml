<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Queue on 伊恩的開發狂想</title><link>https://eanlee.github.io/tags/queue/</link><description>Recent content in Queue on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Tue, 14 Jun 2022 07:46:41 +0000</lastBuildDate><atom:link href="https://eanlee.github.io/tags/queue/index.xml" rel="self" type="application/rss+xml"/><item><title>Queue 佇列的概念</title><link>https://eanlee.github.io/post/series/messagequeue/host/queue/</link><pubDate>Tue, 14 Jun 2022 07:46:41 +0000</pubDate><guid>https://eanlee.github.io/post/series/messagequeue/host/queue/</guid><description>&lt;p>個人認為佇列(Queue)的本質，就是做為資料載體的暫存與緩衝區，同時，它具備 &lt;strong>先進先出(First In First Out, FIFO)&lt;/strong> 的特性。&lt;/p>
&lt;p>在演算法中，有些演算法使用 Queue 做為操作記錄資料的載體，例如針對二元樹的尋訪(Traversal)，廣度優先搜尋(Breadth First Search)，都是活用 Queue FIFO 的特性。&lt;/p>
&lt;p>有時，資料本身的數量有限，但同時有多個對象需要取得資料。使用 Queue 來控制資料的處理速度，或是調配資源的的方式，作為資料配置最佳化的方式之一。&lt;/p>
&lt;p>經常運用於跨執行緒、跨行程、跨系統之中的通訊使用。在這種場域下，產生資料與處理資料的兩方，處理的速度不一相同。借由 Queue 的暫存緩衝與 FIFO 特性，便於採用非同步的處理方式。&lt;/p></description></item></channel></rss>
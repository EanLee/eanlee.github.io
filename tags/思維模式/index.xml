<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>思維模式 on 伊恩的開發狂想</title><link>https://eandev.com/tags/%E6%80%9D%E7%B6%AD%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 思維模式 on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Tue, 26 Jul 2022 09:35:47 +0000</lastBuildDate><atom:link href="https://eandev.com/tags/%E6%80%9D%E7%B6%AD%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>聊聊架構 - 系統負載、分流與限制理論</title><link>https://eandev.com/post/architecture/system-loading-limit-reroute/</link><pubDate>Tue, 26 Jul 2022 09:35:47 +0000</pubDate><guid>https://eandev.com/post/architecture/system-loading-limit-reroute/</guid><description>&lt;p>無論技術決策或解決方案的選擇，經常因為現實環境造成的種種限制條件，導致無法直接使用最優解。需要基於限制條件下，進行相對應的妥協與方案的調整。&lt;/p>
&lt;p>做為系統開發或維運人員，當系統遇到麻煩或困難或瓶頸時，所提出的解決方案或作法，需將先天的限制列入評估。試著在有限的的資源，想辦法得到最大的效率或收益。為此，需要試著找出造成麻煩的瓶頸，加以分析，最終得出解除瓶頸的方案。&lt;/p>
&lt;p>若觀察的視角過小或過於局部，所找到的系統瓶頸，從整個系統視角評估，有時會發現，原先認為的瓶頸，並不是真正的瓶頸問題。為此，可以運用限制理論去找出問題環節，配合 80/20 法則找出影響力最大的點，然後處理它。&lt;/p></description></item><item><title>聊聊架構 - 系統負載、分流與限制理論</title><link>https://eandev.com/post/architecture/system-loading-limit-reroute/</link><pubDate>Tue, 26 Jul 2022 09:35:47 +0000</pubDate><guid>https://eandev.com/post/architecture/system-loading-limit-reroute/</guid><description>&lt;p>無論技術決策或解決方案的選擇，經常因為現實環境造成的種種限制條件，導致無法直接使用最優解。需要基於限制條件下，進行相對應的妥協與方案的調整。&lt;/p>
&lt;p>做為系統開發或維運人員，當系統遇到麻煩或困難或瓶頸時，所提出的解決方案或作法，需將先天的限制列入評估。試著在有限的的資源，想辦法得到最大的效率或收益。為此，需要試著找出造成麻煩的瓶頸，加以分析，最終得出解除瓶頸的方案。&lt;/p>
&lt;p>若觀察的視角過小或過於局部，所找到的系統瓶頸，從整個系統視角評估，有時會發現，原先認為的瓶頸，並不是真正的瓶頸問題。為此，可以運用限制理論去找出問題環節，配合 80/20 法則找出影響力最大的點，然後處理它。&lt;/p></description></item><item><title>聊聊名詞 | 單點故障 | Single point of failure, SPOF</title><link>https://eandev.com/post/nouns/spof/</link><pubDate>Thu, 23 Jun 2022 03:25:10 +0000</pubDate><guid>https://eandev.com/post/nouns/spof/</guid><description>&lt;p>單點故障(Single point of failure, SPOF)，指的是系統上的某一個物理節點故障，而導致整個系統無法運作的現象。&lt;/p>
&lt;p>當進行系統風險評估時，必需將單點故障造成的影響，列入評估的範圍。依單點故障發生，會造成服務中止或系統全面性故障，&lt;a href="https://eandev.com/post/nouns/redundancy/">冗餘機制&lt;/a>的設定就必定列入考量。&lt;/p></description></item><item><title>聊聊名詞 | 單點故障 | Single point of failure, SPOF</title><link>https://eandev.com/post/nouns/spof/</link><pubDate>Thu, 23 Jun 2022 03:25:10 +0000</pubDate><guid>https://eandev.com/post/nouns/spof/</guid><description>&lt;p>單點故障(Single point of failure, SPOF)，指的是系統上的某一個物理節點故障，而導致整個系統無法運作的現象。&lt;/p>
&lt;p>當進行系統風險評估時，必需將單點故障造成的影響，列入評估的範圍。依單點故障發生，會造成服務中止或系統全面性故障，&lt;a href="https://eandev.com/post/nouns/redundancy/">冗餘機制&lt;/a>的設定就必定列入考量。&lt;/p></description></item><item><title>開發雜談 - 對於系統架構的多維度思考能力</title><link>https://eandev.com/post/experiences/multi-dimensional-thinking-for-system-architecture/</link><pubDate>Sat, 18 Jun 2022 17:10:57 +0000</pubDate><guid>https://eandev.com/post/experiences/multi-dimensional-thinking-for-system-architecture/</guid><description>&lt;p>在研究某個軟體的系統架構，發現一個值得探討的問題。&lt;/p>
&lt;p>當設計系統架構時，使用何種的視界去分析與設計，會得到不一樣的設計結果，但結果是否為當下最佳的解決方案？&lt;/p></description></item><item><title>開發雜談 - 對於系統架構的多維度思考能力</title><link>https://eandev.com/post/experiences/multi-dimensional-thinking-for-system-architecture/</link><pubDate>Sat, 18 Jun 2022 17:10:57 +0000</pubDate><guid>https://eandev.com/post/experiences/multi-dimensional-thinking-for-system-architecture/</guid><description>&lt;p>在研究某個軟體的系統架構，發現一個值得探討的問題。&lt;/p>
&lt;p>當設計系統架構時，使用何種的視界去分析與設計，會得到不一樣的設計結果，但結果是否為當下最佳的解決方案？&lt;/p></description></item><item><title>聊聊名詞 | 冗餘 | Redundancy</title><link>https://eandev.com/post/nouns/redundancy/</link><pubDate>Thu, 09 Jun 2022 09:15:15 +0000</pubDate><guid>https://eandev.com/post/nouns/redundancy/</guid><description>&lt;p>冗餘(Redundancy)是指為提昇系統的穩定性與可靠性，刻意配置重複的零件或機能。此動作主要是為避免單一環節失效，對系統的衝擊。&lt;/p></description></item><item><title>聊聊名詞 | 冗餘 | Redundancy</title><link>https://eandev.com/post/nouns/redundancy/</link><pubDate>Thu, 09 Jun 2022 09:15:15 +0000</pubDate><guid>https://eandev.com/post/nouns/redundancy/</guid><description>&lt;p>冗餘(Redundancy)是指為提昇系統的穩定性與可靠性，刻意配置重複的零件或機能。此動作主要是為避免單一環節失效，對系統的衝擊。&lt;/p></description></item><item><title>從消除遊戲學到的專案管理二三事</title><link>https://eandev.com/post/projectmanagement/%E5%BE%9E%E6%B6%88%E9%99%A4%E9%81%8A%E6%88%B2%E5%AD%B8%E5%88%B0%E7%9A%84%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86%E4%BA%8C%E4%B8%89%E4%BA%8B/</link><pubDate>Thu, 28 Apr 2022 03:50:27 +0000</pubDate><guid>https://eandev.com/post/projectmanagement/%E5%BE%9E%E6%B6%88%E9%99%A4%E9%81%8A%E6%88%B2%E5%AD%B8%E5%88%B0%E7%9A%84%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86%E4%BA%8C%E4%B8%89%E4%BA%8B/</guid><description>&lt;p>在休閒時間遊玩的消除遊戲，無意中發現消除遊戲中，每一關的過關方式，都可以與專案管理有關。&lt;/p>
&lt;p>每一關都像一個全新的專案，在專案進行的過程中，一定會對確認目標，確定要交付的內容，可以使用的資源，是否有那些難點是會影響專案進行下去的要素。&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>系統架構 on 伊恩的開發狂想</title><link>https://eandev.com/tags/%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B/</link><description>Recent content in 系統架構 on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 02 Feb 2023 07:58:59 +0000</lastBuildDate><atom:link href="https://eandev.com/tags/%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>淺談 Pattern | 生產者與消費者模型</title><link>https://eandev.com/post/pattern/producer-consumers/</link><pubDate>Thu, 02 Feb 2023 07:58:59 +0000</pubDate><guid>https://eandev.com/post/pattern/producer-consumers/</guid><description>&lt;p>佇列常見用於生產者與消費者模型之中，作為兩者之間的緩沖區。將雙方的直接關係進行解耦，並減少雙方效率不均的問題。&lt;/p>
&lt;p>而在併發的架構下，必須使用鎖定機制與同步機制，確保佇列中的之資源被正確的存取，避免重覆使用或錯誤覆寫的情況。&lt;/p></description></item><item><title>聊聊架構 - 系統負載、分流與限制理論</title><link>https://eandev.com/post/architecture/system-loading-limit-reroute/</link><pubDate>Tue, 26 Jul 2022 09:35:47 +0000</pubDate><guid>https://eandev.com/post/architecture/system-loading-limit-reroute/</guid><description>&lt;p>無論技術決策或解決方案的選擇，經常因為現實環境造成的種種限制條件，導致無法直接使用最優解。需要基於限制條件下，進行相對應的妥協與方案的調整。&lt;/p>
&lt;p>做為系統開發或維運人員，當系統遇到麻煩或困難或瓶頸時，所提出的解決方案或作法，需將先天的限制列入評估。試著在有限的的資源，想辦法得到最大的效率或收益。為此，需要試著找出造成麻煩的瓶頸，加以分析，最終得出解除瓶頸的方案。&lt;/p>
&lt;p>若觀察的視角過小或過於局部，所找到的系統瓶頸，從整個系統視角評估，有時會發現，原先認為的瓶頸，並不是真正的瓶頸問題。為此，可以運用限制理論去找出問題環節，配合 80/20 法則找出影響力最大的點，然後處理它。&lt;/p></description></item><item><title>系統架構演進與 AWS 雲端服務結合(1) - 內部系統快速驗證</title><link>https://eandev.com/post/architecture/cloud/mvp-vaification/</link><pubDate>Fri, 24 Jun 2022 01:17:18 +0000</pubDate><guid>https://eandev.com/post/architecture/cloud/mvp-vaification/</guid><description>&lt;p>假設新創的網路服務提供商，隨著業務的發展，提供服務的軟體系統，從最初的簡易架構，依據面臨的挑戰與需求，不停調整擴充系統架構。&lt;/p>
&lt;p>系統若建立在雲端，隨著系統架構的演進的同時，所對應雲端服務供應商的服務。本文章僅為個人學習與理解雲端服務的手札，有任何更好的建議都歡迎告知。&lt;/p></description></item></channel></rss>
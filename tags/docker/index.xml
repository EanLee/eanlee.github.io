<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 伊恩的開發狂想</title><link>https://eandev.com/tags/docker/</link><description>Recent content in Docker on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Fri, 17 Nov 2023 16:38:06 +0800</lastBuildDate><atom:link href="https://eandev.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker | 縮網址服務實作記錄 (2) - 基於 Docker 的 Let's Encrypt 申請與設定</title><link>https://eandev.com/post/series/side-project/shorten-2-lets-encrypt-setting/</link><pubDate>Fri, 17 Nov 2023 16:38:06 +0800</pubDate><guid>https://eandev.com/post/series/side-project/shorten-2-lets-encrypt-setting/</guid><description>&lt;blockquote>
&lt;p>縮網址服務為 &lt;a href="https://url-ins.com/shorten/">https://url-ins.com/shorten/&lt;/a> ，有任何想法或回饋，可以在 &lt;a href="https://www.surveycake.com/s/wgveX">SurveyCake&lt;/a> 留下寶貴的意見。(為了維持主機的維運，在頁面內放入 Google Adsense 廣告。)&lt;/p>
&lt;/blockquote>
&lt;p>在 &lt;a href="https://eandev.com/post/series/side-project/shorten-1-build-service-base-on-container/">縮網址服務實作記錄(1) - 基於 Docker 容器技術的網站服務架構實踐&lt;/a> 中，已經完成基本服務的建立。&lt;/p>
&lt;p>為了確保服務站台的可靠性與提升 SEO。接下來，就是要為服務站台增加 HTTPS 的 SSL/TLS 憑證保護。&lt;/p>
&lt;p>&lt;code>Let's Encrypt&lt;/code> 提供的免費的 SSL/TLS 憑證，雖然說有 3 個月的時間限制。但只要配合 &lt;code>Certbot&lt;/code> 來協助 SSL/TLS 憑證申請與更新，就可以為站台提供更可靠的保護。&lt;/p>
&lt;p>有趣的是，在研究與尋找如何進行 Ngnix 與 Let&amp;rsquo;s Encrypt 設定的過程，無意中發現 &lt;a href="https://traefik.io/">&lt;code>Traefik&lt;/code>&lt;/a>。一套高度支援 Dockr ，與 Ngnix 相似的反向代理工具(Reverse Proxy)，後續有機會使用，也會隨手記錄操作筆記。&lt;/p>
&lt;blockquote>
&lt;p>在本篇文章中，主要是在討論以下的項目&lt;/p>
&lt;ul>
&lt;li>如何為 Container 內的 NGINX 進行 Let&amp;rsquo;s Encrypt 的設定。&lt;/li>
&lt;li>使用 Certbot 官方提供的 docker Image 來申請 SSL/TLS 憑證。&lt;/li>
&lt;li>Docker 的 Volume 的用法。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docker | 縮網址服務實作記錄 (1) - 基於 Docker 容器技術的網站服務架構實踐</title><link>https://eandev.com/post/series/side-project/shorten-1-build-service-base-on-container/</link><pubDate>Sat, 11 Nov 2023 14:28:57 +0800</pubDate><guid>https://eandev.com/post/series/side-project/shorten-1-build-service-base-on-container/</guid><description>&lt;blockquote>
&lt;p>縮網址服務為 &lt;a href="https://url-ins.com/shorten/">https://url-ins.com/shorten/&lt;/a> ，有任何想法或回饋，可以在 &lt;a href="https://www.surveycake.com/s/wgveX">SurveyCake&lt;/a> 留下寶貴的意見。(為了維持主機的維運，在頁面內放入 Google Adsense 廣告。)&lt;/p>
&lt;/blockquote>
&lt;p>在這一篇文章的內容，主要的內容包含以下項目。&lt;/p>
&lt;ol>
&lt;li>建立系統服務的評估架構規劃。&lt;/li>
&lt;li>Ubuntu 的防火牆設定、使用者密碼/ SSH Key 的認證設定。&lt;/li>
&lt;li>在 Docker 中，利用 Docker network 進行網段劃份，以控制服務之間的訪問。&lt;/li>
&lt;li>使用 Docker Hub 以外的 Container Registry，進行 Docker Image 管理。&lt;/li>
&lt;li>Grafana 與 Loki 的設定方式。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;p>設定 Ubuntu 允許 SSH 使用密碼登入時，除了 &lt;code>/etc/ssh/sshd_config&lt;/code> 需要調整，也要檢查 Include 其他的 &lt;code>.conf&lt;/code> 是否有覆寫的情況。&lt;/p>
&lt;p>若是在要 Docker Compose 使用的 &lt;code>yaml&lt;/code> 檔中，宣告使用外部的 docker network，記得加上 &lt;code>external: true&lt;/code>&lt;/p>
&lt;/blockquote></description></item><item><title>靈活運用 Docker - 打造高效的容器化應用環境</title><link>https://eandev.com/post/container/flexible-opereate-docker-foreword/</link><pubDate>Wed, 28 Jun 2023 09:44:39 +0800</pubDate><guid>https://eandev.com/post/container/flexible-opereate-docker-foreword/</guid><description>&lt;p>目前有許多文章的內容，都包含部份的 Docker 操作指令。也因為如此，所有的 Docker 指令與說明散在各處，所以起心動念，整理完整的 Docker 操作與應用的系列文章。&lt;/p></description></item><item><title>Docker | 使用 Docker 建置 ASP.NET Webapi 的 Image</title><link>https://eandev.com/post/container/aspnet-webapi-containerized/</link><pubDate>Sun, 26 Feb 2023 14:18:53 +0800</pubDate><guid>https://eandev.com/post/container/aspnet-webapi-containerized/</guid><description>&lt;p>想要使用 Docker 技術將 ASP.NET Web API 應用程式打包成 image 時，需要針對機敏性資料進行特別的處理，以確保這些機密性資料不會外流。&lt;/p>
&lt;p>在本文中，將簡單介紹 Dockerfile 的建置方式，以及如何提供連線字串給 Container 內的應用程式使用。雖然內文只介紹連線字串的部份，但是憑證的處理方式，也是類似的作法。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>在使用 Docker 封裝應用程式時，有時需要使用一些機敏性資料，需要額外處理，例如連線字串及憑證資料等。&lt;/li>
&lt;li>Container 的所有設定，都可以透過 &lt;code>docker inspect&lt;/code> 指令查看到，所以傳遞機敏性資料，必須要加密或透過其他方式。&lt;/li>
&lt;li>機敏資料的傳遞，可以透過 &lt;code>環境變數&lt;/code>、&lt;code>命令列參數&lt;/code>與 &lt;code>mount/volume&lt;/code> 的方式。&lt;/li>
&lt;li>Docker Image 建立後，可以使用 &lt;code>docker scan&lt;/code> 指令，進行掃描，確認是否有安全性問題。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docker | 建立 PostgreSQL 的 container 時，同時完成資料庫的初始化</title><link>https://eandev.com/post/container/docker-postgresql-initialization-scripts/</link><pubDate>Tue, 21 Feb 2023 00:13:07 +0800</pubDate><guid>https://eandev.com/post/container/docker-postgresql-initialization-scripts/</guid><description>&lt;p>現在都可以使用 Container 的方式來運行資料庫，那麼。是否有辦法在 Image 建立 Container 的當下，就一併完成資料庫 schema 的設定？&lt;/p>
&lt;p>若是可以，在啟動 PostgreSQL Image 時，就已經完成初始化資料庫的 container ，可以享受一些好處。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>簡化部署流程：在建立 Container 時，自動完成初始化資料庫的過程，可以大幅簡化部署流程。只需要運行一個命令，就可以創建已經包含初始化資料庫的 Container，而不需要再手動初始化資料庫。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自動化測試：例如在每次測試運行時，都使用相同的的資料庫，確保測試結果一致性和可靠性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方便協作：不同的開發人員可以使用相同的初始化資料庫 Continaer，確保在開發和測試過程中，使用相同的資料庫，減少開發和測試之間的差異。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>若要讓 PostgreSQL container 建立的同時，完成資料庫 schema 初始化。要在在建立 Docker Image 的同時，把 &lt;code>init.sql&lt;/code> 複制到 &lt;code>/docker-entrypoint-initdb.d/&lt;/code>&lt;/li>
&lt;li>&lt;code>docker-entrypoint-initdb.d&lt;/code> 可放入多個 .sql 檔，其執行順序依地區設定的檔名順序。預設為 &lt;code>en_US.utf8&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>EF Core | 使用 dotnet-ef 建立 SQL Server on Docker 的 DBContext</title><link>https://eandev.com/post/develop/dotnet-ef-sqlserver/</link><pubDate>Tue, 14 Feb 2023 18:12:33 +0800</pubDate><guid>https://eandev.com/post/develop/dotnet-ef-sqlserver/</guid><description>&lt;p>在 &lt;a href="https://eandev.com/post/develop/dotnet-ef-postgresql-dbcontext/">使用 dotnet-ef 建立 PostgreSQL 的 DBContext&lt;/a> 之後，也嘗試從 SQL Server on Docker 建立 DBContext，就順手把過程中遇到的小問題記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>使用 Docker 建立的 SQL Server，若需要進行 bak 的備份與還原時，在執行 Container 時，別忘了 mount 資料夾。&lt;/li>
&lt;li>使用 &lt;code>dotnet ef dbcontext scaffold&lt;/code> 時，發生 &lt;code>此憑證鏈結是由不受信任的授權單位發出的&lt;/code> 的差異，請在連線字串內加入 &lt;code>TrustServerCertificate=true&lt;/code>。&lt;/li>
&lt;li>使用 &lt;code>dotnet ef dbcontext scaffold&lt;/code> 時，發生 &lt;code>Login failed for user&lt;/code> 的名稱與連線字串內的 &lt;code>User Id&lt;/code> 不同時，請確認連線字串內的 &lt;code>Trusted_Connection&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>使用 Azure Pipelines / Jenkins 建置 Docker image</title><link>https://eandev.com/post/series/build-automated-deploy/build-docker-image/</link><pubDate>Wed, 11 Jan 2023 15:01:17 +0800</pubDate><guid>https://eandev.com/post/series/build-automated-deploy/build-docker-image/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1906">2019 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/build-automated-deploy/build-ci-cd-from-scratch/#container">從零開始建立自動化發佈的流水線&lt;/a>tainer 篇&lt;/p>
&lt;/blockquote>
&lt;p>在上一篇 &lt;a href="https://eandev.com/post/series/build-automated-deploy/container-build-execution-environment-required-ci/">使用 Container 建立 CI 所需要的建置環境&lt;/a> 中，初步了解如何在 Travis CI、Azure DevOps、Jenkins 中，使用 Docker 來建立 CI 運行 Build、Test 所需的環境。&lt;/p>
&lt;p>接著，試著運用 Azure DevOps、Jenkins 來建立 Docker image 的 Artifact。&lt;/p></description></item><item><title>使用 Container 建立 CI 所需要的建置環境</title><link>https://eandev.com/post/series/build-automated-deploy/container-build-execution-environment-required-ci/</link><pubDate>Wed, 11 Jan 2023 00:15:41 +0800</pubDate><guid>https://eandev.com/post/series/build-automated-deploy/container-build-execution-environment-required-ci/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1906">2019 iT 邦幫忙鐵人賽&lt;/a> 文章補完計劃，&lt;a href="https://eandev.com/post/series/build-automated-deploy/build-ci-cd-from-scratch/#container">從零開始建立自動化發佈的流水線&lt;/a> Container 篇&lt;/p>
&lt;/blockquote>
&lt;p>在 &lt;a href="https://eandev.com/post/series/build-automated-deploy/docker-operate/">Docker 操作簡介&lt;/a> 中，初步了解 Docker、dockerfile、docker-compose 的操作方法。&lt;/p>
&lt;p>接下來，要與 CI Server 搭配使用，讓 CI Server 可以依據設定檔，使用 docker 的方式，建置出執行 CI 所需要的環境。&lt;/p></description></item><item><title>Docker 操作簡介 - command / dockerfile / docker-compose</title><link>https://eandev.com/post/series/build-automated-deploy/docker-operate/</link><pubDate>Mon, 09 Jan 2023 09:47:58 +0800</pubDate><guid>https://eandev.com/post/series/build-automated-deploy/docker-operate/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1906">2019 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/build-automated-deploy/build-ci-cd-from-scratch/#ontainer">從零開始建立自動化發佈的流水線&lt;/a> Container 篇&lt;/p>
&lt;/blockquote>
&lt;p>在上一篇 &lt;a href="https://eandev.com/post/series/build-automated-deploy/container-intro/">部署新境界 - 使用 Container 簡化流程&lt;/a> 中，初步了解 Virtual Machine 與 Container 的差異、Docker 的歷史背景與安裝方式。&lt;/p>
&lt;p>接下來，讓我們來進一步了解 Docker 相關的指令與操作方式。&lt;/p></description></item><item><title>部署新境界 - 使用 Container 簡化流程</title><link>https://eandev.com/post/series/build-automated-deploy/container-intro/</link><pubDate>Fri, 19 Aug 2022 22:15:18 +0800</pubDate><guid>https://eandev.com/post/series/build-automated-deploy/container-intro/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/users/20107551/ironman/1906">2019 iT 邦幫忙鐵人賽&lt;/a>文章補完計劃，&lt;a href="https://eandev.com/post/series/build-automated-deploy/build-ci-cd-from-scratch/#container">從零開始建立自動化發佈的流水線&lt;/a> Container 篇&lt;/p>
&lt;/blockquote>
&lt;p>當系統需要重新建置後，會發現建置的過程與步驟煩雜，甚至每次安裝都會發生不同的問題，不管使用虛擬機或是實體機。&lt;/p>
&lt;p>此時，可以視實際情況，考慮使用 Container 的技術，減少環境建置的複雜性與成本。&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EF Core on 伊恩的開發狂想</title><link>https://eandev.com/tags/ef-core/</link><description>Recent content in EF Core on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Wed, 28 Jun 2023 23:42:45 +0800</lastBuildDate><atom:link href="https://eandev.com/tags/ef-core/index.xml" rel="self" type="application/rss+xml"/><item><title>EF Core | 使用 T4 CodeTemplate 客制化 EFCore Scaffold 產出內容</title><link>https://eandev.com/post/develop/dotnet-ef-core-customized-dbcontext-entity/</link><pubDate>Wed, 28 Jun 2023 23:42:45 +0800</pubDate><guid>https://eandev.com/post/develop/dotnet-ef-core-customized-dbcontext-entity/</guid><description>&lt;p>接續 DBContext 操作的議題，目前已知現有的資料庫內，所有的表格都有 &lt;code>CreatedAt&lt;/code>、&lt;code>UpdatedAt&lt;/code>、&lt;code>UpdatedUser&lt;/code>、 &lt;code>IsDeleted&lt;/code> 四個特定字詞結尾的欄位，額外記錄資料異動記錄。&lt;/p>
&lt;p>在「&lt;a href="https://eandev.com/post/develop/dfcore-dbcontext-hasqueryfilter/">使用 HasQueryFilter 限定 DBContext 查詢內容&lt;/a>」中，提到如何透過 &lt;code>HasQueryFilter&lt;/code> 來簡化資料庫查詢的動作。&lt;/p>
&lt;p>接下來，想要再進一步的封裝 EFCore 所使用的 Entity，讓這四個欄位的資訊，不要曝露於 DBContext 的操作中。&lt;/p>
&lt;p>針對客制化 EFCore 的 DBContext 與 Entity Type，將相關的實作內容記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>若是覺得用 &lt;code>dotnet ef dbcontext scaffold&lt;/code> 的指令來建立 DBContext 不方便，在 Visual Studo 可以安裝 &lt;a href="https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools">&lt;code>EF Core Power Tool&lt;/code>&lt;/a> Extension 套件，以 GUI 進階設定 DBContext 的建立內容。&lt;/li>
&lt;li>針對 DBContext 的查詢要進行過濾，可在 DBContext 內的 &lt;code>OnModelCreatingPartial(ModelBuilder modelBuilder)&lt;/code> 進行過濾。&lt;/li>
&lt;li>若要使用 EFCore 的 Shadow Property 來隱藏並操作資料，需要&lt;strong>規範資料庫欄位的格式&lt;/strong>，避免 EF Core 底層解析錯誤。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>EF Core | 使用 HasQueryFilter 限定 DBContext 查詢內容</title><link>https://eandev.com/post/develop/dfcore-dbcontext-hasqueryfilter/</link><pubDate>Mon, 19 Jun 2023 03:17:17 +0800</pubDate><guid>https://eandev.com/post/develop/dfcore-dbcontext-hasqueryfilter/</guid><description>&lt;p>前些時間，在幫朋友改造現有倉儲系統時，發現現有資料庫內，所有的表格都有四個作為異動記錄使用的固定欄位。&lt;/p>
&lt;p>導致查詢這些資料時，需要針對這些欄位內的數值，去做進行過濾的動作。&lt;/p>
&lt;p>雖然以前經常使用 &lt;code>Where&lt;/code> 與自定義的 &lt;code>IQueryable Extension Methods&lt;/code> 來過濾資料，但是總會想要再更精簡開發要寫的程式碼。剛好發現 Entity Framework Core 在 2.0 版之後，提供了一個 Gobal Query Filter 的作法。&lt;/p>
&lt;p>就順便把實驗過程與踩到的坑，順手記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>Entity Framework 常見過濾查詢資料作法有 &lt;code>Where&lt;/code> 與自定義的 &lt;code>IQueryable Extension Methods&lt;/code> 。&lt;/li>
&lt;li>EF Core 2.0 之後提供 &lt;code>HasQueryFilter&lt;/code> 的方法，可針對 Entity 的任何查詢，進行套用 Linq 運算式。&lt;/li>
&lt;li>若要排除 &lt;code>HasQueryFilter&lt;/code> 的影響，可以在 DBContext.Entites 加上 &lt;code>.IgnoreQueryFilters()&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>EF Core | 使用 dotnet-ef 建立 SQL Server on Docker 的 DBContext</title><link>https://eandev.com/post/develop/dotnet-ef-sqlserver/</link><pubDate>Tue, 14 Feb 2023 18:12:33 +0800</pubDate><guid>https://eandev.com/post/develop/dotnet-ef-sqlserver/</guid><description>&lt;p>在 &lt;a href="https://eandev.com/post/develop/dotnet-ef-postgresql-dbcontext/">使用 dotnet-ef 建立 PostgreSQL 的 DBContext&lt;/a> 之後，也嘗試從 SQL Server on Docker 建立 DBContext，就順手把過程中遇到的小問題記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>使用 Docker 建立的 SQL Server，若需要進行 bak 的備份與還原時，在執行 Container 時，別忘了 mount 資料夾。&lt;/li>
&lt;li>使用 &lt;code>dotnet ef dbcontext scaffold&lt;/code> 時，發生 &lt;code>此憑證鏈結是由不受信任的授權單位發出的&lt;/code> 的差異，請在連線字串內加入 &lt;code>TrustServerCertificate=true&lt;/code>。&lt;/li>
&lt;li>使用 &lt;code>dotnet ef dbcontext scaffold&lt;/code> 時，發生 &lt;code>Login failed for user&lt;/code> 的名稱與連線字串內的 &lt;code>User Id&lt;/code> 不同時，請確認連線字串內的 &lt;code>Trusted_Connection&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>EF Core | 使用 dotnet-ef 建立 PostgreSQL 的 DBContext</title><link>https://eandev.com/post/develop/dotnet-ef-postgresql-dbcontext/</link><pubDate>Mon, 13 Feb 2023 12:13:02 +0800</pubDate><guid>https://eandev.com/post/develop/dotnet-ef-postgresql-dbcontext/</guid><description>&lt;p>若是有使用過 Entity Framework, EF 的經驗，必然對 &lt;code>DBContext&lt;/code> 類別有所了解。在 EF 時可以使用 Visual Studo 的 UI 工具，以 Database-First 的方式建立 DBContext。&lt;/p>
&lt;p>本篇文章則是記錄 Database-First 的開發方式下，EF Core 如何使用 CLI 來產生 DBContext。&lt;/p>
&lt;blockquote>
&lt;p>🔖 長話短說 🔖&lt;/p>
&lt;ul>
&lt;li>EF Core 要操作 PostgreSQL 的話，可使用 &lt;code>Npgsql.EntityFrameworkCore.PostgreSQL&lt;/code>&lt;/li>
&lt;li>可使用 &lt;code>dotnet tool update --global dotnet-ef&lt;/code> 進行 &lt;code>dotnet-ef&lt;/code> 版本更新&lt;/li>
&lt;li>可使用 &lt;code>dotnet ef dbcontext scffold&lt;/code> 的指令，協助從資料庫已存在的 Schema 產生對應的 dbcontext。&lt;/li>
&lt;li>若專案內未參考 &lt;code>Microsoft.EntityFrameworkCore.Design&lt;/code> 的話，&lt;code>dotnet ef dbcontext scffold&lt;/code> 無法順利動作。&lt;/li>
&lt;li>機敏性資料，可使用 &lt;code>user-secrets&lt;/code> 工具。&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>
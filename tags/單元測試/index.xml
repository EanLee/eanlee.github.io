<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>單元測試 on 伊恩的開發狂想</title><link>https://eanlee.github.io/tags/%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/</link><description>Recent content in 單元測試 on 伊恩的開發狂想</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 04 Aug 2022 06:22:43 +0000</lastBuildDate><atom:link href="https://eanlee.github.io/tags/%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>淺談單元測試的撰寫</title><link>https://eanlee.github.io/post/test/taking_ut/</link><pubDate>Thu, 04 Aug 2022 06:22:43 +0000</pubDate><guid>https://eanlee.github.io/post/test/taking_ut/</guid><description>&lt;p>近年來，在業界各位前輩的推展下，越來越多人知道單元測試，並且開始撰寫單元測試。&lt;/p>
&lt;p>但有些撰寫單元測試過程中，遇到有些經常被人詢問議題，或是自己撰寫過程所遇到困惑點，在這分享個人的觀點。&lt;/p>
&lt;ul>
&lt;li>運用單元測試，讓工具可以自動化一再反覆驗證核心業務邏輯或是高風險的邏輯，以確保業務邏輯或規則的正確性。&lt;/li>
&lt;li>對於沒有測試保護的程式，使用已知的使用情境案例，從修改部份進行最大範圍的框選，運用粗顆粒的測試案例，讓修改部份，有個基本的保護。&lt;/li>
&lt;li>對於需要注入眾多物件的類別，應考量是否需要進行功能切分。減少單元測試的複雜性，提升程式的維護性。&lt;/li>
&lt;/ul></description></item><item><title>[Fluent Assertions] Object graph comparison</title><link>https://eanlee.github.io/post/test/fluentassertionscollectionscompare/</link><pubDate>Thu, 11 Feb 2021 14:00:22 +0000</pubDate><guid>https://eanlee.github.io/post/test/fluentassertionscollectionscompare/</guid><description>&lt;p>日前在撰寫單元測試時，發生測試失敗，使用 &lt;code>Should().BeEquivalentTo(expected)&lt;/code> 進行物件比對，已確認 &lt;code>待測物件&lt;/code> 與 &lt;code>期望物件&lt;/code> 內的資料相同，但卻出現 &lt;code>be it misses&lt;/code> 造成的測試結果&lt;code>失敗&lt;/code>。所使用的 FlunentAssertion Nuget 版本為 &lt;code>4.13.1&lt;/code> 。&lt;/p></description></item></channel></rss>